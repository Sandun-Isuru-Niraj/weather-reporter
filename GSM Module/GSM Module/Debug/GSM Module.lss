
GSM Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000237a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e0  00800060  0000237a  0000240e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ef  00800240  00800240  000025ee  2**0
                  ALLOC
  3 .stab         00003480  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b52  00000000  00000000  00005a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  000065c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a62  00000000  00000000  000067c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9a  00000000  00000000  0000922a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c5  00000000  00000000  00009fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c0  00000000  00000000  0000b58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ed  00000000  00000000  0000bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002117  00000000  00000000  0000c339  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000e450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_13>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	lds	r16, 0x00
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <LCDByte+0x20>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <main+0x1f6>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	lds	r27, 0x6a
      e2:	6f a5       	lds	r22, 0x6f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <TempControl+0x36>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <dht_getdata+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea e7       	ldi	r30, 0x7A	; 122
     162:	f3 e2       	ldi	r31, 0x23	; 35
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a0 34       	cpi	r26, 0x40	; 64
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	13 e0       	ldi	r17, 0x03	; 3
     172:	a0 e4       	ldi	r26, 0x40	; 64
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	af 32       	cpi	r26, 0x2F	; 47
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
     184:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <dht_getdata>:
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

//get data from sensor
int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
     18c:	8f 92       	push	r8
     18e:	9f 92       	push	r9
     190:	af 92       	push	r10
     192:	bf 92       	push	r11
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <dht_getdata+0x1a>
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <dht_getdata+0x1c>
     1a8:	0f 92       	push	r0
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	8c 01       	movw	r16, r24
     1b0:	7b 01       	movw	r14, r22
	uint8_t bits[5];
	uint8_t i,j = 0;

	memset(bits, 0, sizeof(bits));
     1b2:	fe 01       	movw	r30, r28
     1b4:	31 96       	adiw	r30, 0x01	; 1
     1b6:	85 e0       	ldi	r24, 0x05	; 5
     1b8:	df 01       	movw	r26, r30
     1ba:	1d 92       	st	X+, r1
     1bc:	8a 95       	dec	r24
     1be:	e9 f7       	brne	.-6      	; 0x1ba <dht_getdata+0x2e>

	//reset port
	DDRD |= (1<<PIND6); //output
     1c0:	8e 9a       	sbi	0x11, 6	; 17
	PORTD |= (1<<PIND6); //high
     1c2:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c4:	e7 ea       	ldi	r30, 0xA7	; 167
     1c6:	f1 e6       	ldi	r31, 0x61	; 97
     1c8:	31 97       	sbiw	r30, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <dht_getdata+0x3c>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <dht_getdata+0x42>
     1ce:	00 00       	nop
	_delay_ms(100);

	//send request
	PORTD &= ~(1<<PIND6); //low
     1d0:	96 98       	cbi	0x12, 6	; 18
     1d2:	83 e9       	ldi	r24, 0x93	; 147
     1d4:	91 e1       	ldi	r25, 0x11	; 17
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <dht_getdata+0x4a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <dht_getdata+0x50>
     1dc:	00 00       	nop
	_delay_ms(18);
	PORTD |= (1<<PIND6); //high
     1de:	96 9a       	sbi	0x12, 6	; 18
	DDRD &= ~(1<<PIND6); //input
     1e0:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e2:	9d e0       	ldi	r25, 0x0D	; 13
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <dht_getdata+0x58>
     1e8:	00 00       	nop
	_delay_us(40);

	//check start condition 1
	if((PIND & (1<<PIND6))) {
     1ea:	86 99       	sbic	0x10, 6	; 16
     1ec:	5e c0       	rjmp	.+188    	; 0x2aa <dht_getdata+0x11e>
     1ee:	aa e1       	ldi	r26, 0x1A	; 26
     1f0:	aa 95       	dec	r26
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <dht_getdata+0x64>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <dht_getdata+0x6a>
		return -1;
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIND & (1<<PIND6))) {
     1f6:	86 9b       	sbis	0x10, 6	; 16
     1f8:	5a c0       	rjmp	.+180    	; 0x2ae <dht_getdata+0x122>
     1fa:	ba e1       	ldi	r27, 0x1A	; 26
     1fc:	ba 95       	dec	r27
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <dht_getdata+0x70>
     200:	00 c0       	rjmp	.+0      	; 0x202 <dht_getdata+0x76>
     202:	6e 01       	movw	r12, r28
     204:	08 94       	sec
     206:	c1 1c       	adc	r12, r1
     208:	d1 1c       	adc	r13, r1
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

//get data from sensor
int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
     20a:	0f 2e       	mov	r0, r31
     20c:	f6 e0       	ldi	r31, 0x06	; 6
     20e:	af 2e       	mov	r10, r31
     210:	bb 24       	eor	r11, r11
     212:	f0 2d       	mov	r31, r0
     214:	ac 0e       	add	r10, r28
     216:	bd 1e       	adc	r11, r29
     218:	e7 e0       	ldi	r30, 0x07	; 7
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIND & (1<<PIND6)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
     21e:	88 24       	eor	r8, r8
     220:	99 24       	eor	r9, r9
     222:	83 94       	inc	r8
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

//get data from sensor
int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
     224:	49 ec       	ldi	r20, 0xC9	; 201
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	25 c0       	rjmp	.+74     	; 0x274 <dht_getdata+0xe8>
     22a:	01 97       	sbiw	r24, 0x01	; 1
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIND & (1<<PIND6))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > 200) {
     22c:	11 f4       	brne	.+4      	; 0x232 <dht_getdata+0xa6>
     22e:	41 c0       	rjmp	.+130    	; 0x2b2 <dht_getdata+0x126>
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

//get data from sensor
int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
     230:	ca 01       	movw	r24, r20
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIND & (1<<PIND6))) { //wait for an high input (non blocking)
     232:	86 9b       	sbis	0x10, 6	; 16
     234:	fa cf       	rjmp	.-12     	; 0x22a <dht_getdata+0x9e>
     236:	8a e0       	ldi	r24, 0x0A	; 10
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <dht_getdata+0xac>
				if(timeoutcounter > 200) {
					return -1; //timeout
				}
			}
			_delay_us(30);
			if(PIND & (1<<PIND6)) //if input is high after 30 us, get result
     23c:	86 9b       	sbis	0x10, 6	; 16
     23e:	08 c0       	rjmp	.+16     	; 0x250 <dht_getdata+0xc4>
				result |= (1<<(7-i));
     240:	c4 01       	movw	r24, r8
     242:	02 2e       	mov	r0, r18
     244:	02 c0       	rjmp	.+4      	; 0x24a <dht_getdata+0xbe>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	0a 94       	dec	r0
     24c:	e2 f7       	brpl	.-8      	; 0x246 <dht_getdata+0xba>
     24e:	68 2b       	or	r22, r24
			timeoutcounter = 0;
			while(PIND & (1<<PIND6)) { //wait until input get low (non blocking)
     250:	ca 01       	movw	r24, r20
     252:	02 c0       	rjmp	.+4      	; 0x258 <dht_getdata+0xcc>
     254:	01 97       	sbiw	r24, 0x01	; 1
				timeoutcounter++;
				if(timeoutcounter > 200) {
     256:	79 f1       	breq	.+94     	; 0x2b6 <dht_getdata+0x12a>
			}
			_delay_us(30);
			if(PIND & (1<<PIND6)) //if input is high after 30 us, get result
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIND & (1<<PIND6)) { //wait until input get low (non blocking)
     258:	86 99       	sbic	0x10, 6	; 16
     25a:	fc cf       	rjmp	.-8      	; 0x254 <dht_getdata+0xc8>
     25c:	21 50       	subi	r18, 0x01	; 1
     25e:	30 40       	sbci	r19, 0x00	; 0

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
		uint8_t result=0;
		for(i=0; i<8; i++) {//read every bit
     260:	9f ef       	ldi	r25, 0xFF	; 255
     262:	2f 3f       	cpi	r18, 0xFF	; 255
     264:	39 07       	cpc	r19, r25
     266:	21 f7       	brne	.-56     	; 0x230 <dht_getdata+0xa4>
				if(timeoutcounter > 200) {
					return -1; //timeout
				}
			}
		}
		bits[j] = result;
     268:	d6 01       	movw	r26, r12
     26a:	6d 93       	st	X+, r22
     26c:	6d 01       	movw	r12, r26
	}
	_delay_us(80);

	//read the data
	uint16_t timeoutcounter = 0;
	for (j=0; j<5; j++) { //read 5 byte
     26e:	aa 15       	cp	r26, r10
     270:	bb 05       	cpc	r27, r11
     272:	19 f0       	breq	.+6      	; 0x27a <dht_getdata+0xee>
#include <string.h>
#include <avr/io.h>
#include <util/delay.h>

//get data from sensor
int8_t dht_getdata(int8_t *temperature, int8_t *humidity) {
     274:	9f 01       	movw	r18, r30
     276:	67 2f       	mov	r22, r23
     278:	db cf       	rjmp	.-74     	; 0x230 <dht_getdata+0xa4>
		}
		bits[j] = result;
	}

	//reset port
	DDRD |= (1<<PIND6); //output
     27a:	8e 9a       	sbi	0x11, 6	; 17
	PORTD |= (1<<PIND6); //low
     27c:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27e:	e7 ea       	ldi	r30, 0xA7	; 167
     280:	f1 e6       	ldi	r31, 0x61	; 97
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <dht_getdata+0xf6>
     286:	00 c0       	rjmp	.+0      	; 0x288 <dht_getdata+0xfc>
     288:	00 00       	nop
	_delay_ms(100);

	//check checksum
	if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) == bits[4]) {
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9b 81       	ldd	r25, Y+3	; 0x03
     28e:	3a 81       	ldd	r19, Y+2	; 0x02
     290:	38 0f       	add	r19, r24
     292:	39 0f       	add	r19, r25
     294:	2c 81       	ldd	r18, Y+4	; 0x04
     296:	32 0f       	add	r19, r18
     298:	2d 81       	ldd	r18, Y+5	; 0x05
     29a:	32 17       	cp	r19, r18
     29c:	71 f4       	brne	.+28     	; 0x2ba <dht_getdata+0x12e>
		//return temperature and humidity
		*temperature = bits[2];
     29e:	d8 01       	movw	r26, r16
     2a0:	9c 93       	st	X, r25
		*humidity = bits[0];
     2a2:	f7 01       	movw	r30, r14
     2a4:	80 83       	st	Z, r24
		return 0;
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	09 c0       	rjmp	.+18     	; 0x2bc <dht_getdata+0x130>
	DDRD &= ~(1<<PIND6); //input
	_delay_us(40);

	//check start condition 1
	if((PIND & (1<<PIND6))) {
		return -1;
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	07 c0       	rjmp	.+14     	; 0x2bc <dht_getdata+0x130>
	}
	_delay_us(80);
	//check start condition 2
	if(!(PIND & (1<<PIND6))) {
		return -1;
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	05 c0       	rjmp	.+10     	; 0x2bc <dht_getdata+0x130>
		for(i=0; i<8; i++) {//read every bit
			timeoutcounter = 0;
			while(!(PIND & (1<<PIND6))) { //wait for an high input (non blocking)
				timeoutcounter++;
				if(timeoutcounter > 200) {
					return -1; //timeout
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	03 c0       	rjmp	.+6      	; 0x2bc <dht_getdata+0x130>
				result |= (1<<(7-i));
			timeoutcounter = 0;
			while(PIND & (1<<PIND6)) { //wait until input get low (non blocking)
				timeoutcounter++;
				if(timeoutcounter > 200) {
					return -1; //timeout
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <dht_getdata+0x130>
		//return temperature and humidity
		*temperature = bits[2];
		*humidity = bits[0];
		return 0;
	}
	return -1;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
}
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	0f 91       	pop	r16
     2ce:	ff 90       	pop	r15
     2d0:	ef 90       	pop	r14
     2d2:	df 90       	pop	r13
     2d4:	cf 90       	pop	r12
     2d6:	bf 90       	pop	r11
     2d8:	af 90       	pop	r10
     2da:	9f 90       	pop	r9
     2dc:	8f 90       	pop	r8
     2de:	08 95       	ret

000002e0 <dht_gettemperature>:

// get temperature
int8_t dht_gettemperature(int8_t *temperature) {
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	0f 92       	push	r0
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
	int8_t humidity = 0;
     2ea:	19 82       	std	Y+1, r1	; 0x01
	return dht_getdata(temperature, &humidity);
     2ec:	be 01       	movw	r22, r28
     2ee:	6f 5f       	subi	r22, 0xFF	; 255
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata>
}
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <dht_gethumidity>:

// get humidity
int8_t dht_gethumidity(int8_t *humidity) {
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	0f 92       	push	r0
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	bc 01       	movw	r22, r24
	int8_t temperature = 0;
     30a:	19 82       	std	Y+1, r1	; 0x01
	return dht_getdata(&temperature, humidity);
     30c:	ce 01       	movw	r24, r28
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata>
}
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <dht_gettemperaturehumidity>:

//get temperature and humidity
	int8_t dht_gettemperaturehumidity(int8_t *temperature, int8_t *humidity) {
	return dht_getdata(temperature, humidity);
     31c:	0e 94 c6 00 	call	0x18c	; 0x18c <dht_getdata>
}
     320:	08 95       	ret

00000322 <uart_init>:
 
 
 
 void uart_init (void)
 {
	 UBRRH = (BAUDRATE>>8);                      // shift the register right by 8 bits
     322:	10 bc       	out	0x20, r1	; 32
	 UBRRL = BAUDRATE;                           // set baud rate
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	89 b9       	out	0x09, r24	; 9
	 UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
     328:	8a b1       	in	r24, 0x0a	; 10
     32a:	88 61       	ori	r24, 0x18	; 24
     32c:	8a b9       	out	0x0a, r24	; 10
	 UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
     32e:	80 b5       	in	r24, 0x20	; 32
     330:	86 68       	ori	r24, 0x86	; 134
     332:	80 bd       	out	0x20, r24	; 32
 }
     334:	08 95       	ret

00000336 <uart_transmit_char>:
 void uart_transmit_char (unsigned char data)
 {
	 while (!( UCSRA & (1<<UDRE)));                // wait while register is free
     336:	5d 9b       	sbis	0x0b, 5	; 11
     338:	fe cf       	rjmp	.-4      	; 0x336 <uart_transmit_char>
	 UDR = data;                                   // load data in the register
     33a:	8c b9       	out	0x0c, r24	; 12
 }
     33c:	08 95       	ret

0000033e <uart_transmit_string>:
 void uart_transmit_string (const unsigned char* st)
 {
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
	 
	 
	 while(*st)
     344:	88 81       	ld	r24, Y
     346:	88 23       	and	r24, r24
     348:	31 f0       	breq	.+12     	; 0x356 <uart_transmit_string+0x18>
 void uart_transmit_char (unsigned char data)
 {
	 while (!( UCSRA & (1<<UDRE)));                // wait while register is free
	 UDR = data;                                   // load data in the register
 }
 void uart_transmit_string (const unsigned char* st)
     34a:	21 96       	adiw	r28, 0x01	; 1
 {
	 
	 
	 while(*st)
	 uart_transmit_char(*st++);
     34c:	0e 94 9b 01 	call	0x336	; 0x336 <uart_transmit_char>
 }
 void uart_transmit_string (const unsigned char* st)
 {
	 
	 
	 while(*st)
     350:	89 91       	ld	r24, Y+
     352:	88 23       	and	r24, r24
     354:	d9 f7       	brne	.-10     	; 0x34c <uart_transmit_string+0xe>
	 uart_transmit_char(*st++);
	 // load data in the register
                                 // load data in the register
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <Halt>:
	
	Halt();
}

void Halt()
{
     35c:	ff cf       	rjmp	.-2      	; 0x35c <Halt>

0000035e <rxvalue>:
	while(1);
}


unsigned char rxvalue(void){
	while(!(UCSRA&(1<<RXC)));
     35e:	5f 9b       	sbis	0x0b, 7	; 11
     360:	fe cf       	rjmp	.-4      	; 0x35e <rxvalue>
	{
		rxdata=UDR;
     362:	8c b1       	in	r24, 0x0c	; 12
     364:	80 93 5e 02 	sts	0x025E, r24
		return rxdata;
	}
}
     368:	08 95       	ret

0000036a <InitADC>:



void InitADC()
{
	ADMUX=(1<<REFS0);                       // For Aref=AVcc;
     36a:	80 e4       	ldi	r24, 0x40	; 64
     36c:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescalar div factor =128
     36e:	87 e8       	ldi	r24, 0x87	; 135
     370:	86 b9       	out	0x06, r24	; 6
}
     372:	08 95       	ret

00000374 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
     374:	97 b1       	in	r25, 0x07	; 7
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
     376:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
     378:	98 2b       	or	r25, r24
     37a:	97 b9       	out	0x07, r25	; 7
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
     37c:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
     37e:	34 9b       	sbis	0x06, 4	; 6
     380:	fe cf       	rjmp	.-4      	; 0x37e <ReadADC+0xa>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in data sheets.
	//The code writes '1' but it result in setting bit to '0' !!!
	ADCSRA|=(1<<ADIF);
     382:	34 9a       	sbi	0x06, 4	; 6
     384:	87 ea       	ldi	r24, 0xA7	; 167
     386:	91 e6       	ldi	r25, 0x61	; 97
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <ReadADC+0x14>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <ReadADC+0x1a>
     38e:	00 00       	nop
	_delay_ms(100);
	return(ADC);
     390:	84 b1       	in	r24, 0x04	; 4
     392:	95 b1       	in	r25, 0x05	; 5
}
     394:	08 95       	ret

00000396 <TempControl>:

void TempControl(int tem){
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
	dht_gettemperaturehumidity(&temperature, &humidity);
     3a2:	c0 e4       	ldi	r28, 0x40	; 64
     3a4:	d2 e0       	ldi	r29, 0x02	; 2
     3a6:	01 e4       	ldi	r16, 0x41	; 65
     3a8:	12 e0       	ldi	r17, 0x02	; 2
     3aa:	ce 01       	movw	r24, r28
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 8e 01 	call	0x31c	; 0x31c <dht_gettemperaturehumidity>
	LCDClear();
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	
	LCDWriteStringXY(0,0,"Hum:");
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     3c2:	80 e6       	ldi	r24, 0x60	; 96
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
	
	LCDWriteStringXY(0,1,"Temp:");
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     3d2:	85 e6       	ldi	r24, 0x65	; 101
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
	//while(1)
	{
		
		if(dht_gettemperaturehumidity(&temperature, &humidity) != -1) {
     3da:	ce 01       	movw	r24, r28
     3dc:	b8 01       	movw	r22, r16
     3de:	0e 94 8e 01 	call	0x31c	; 0x31c <dht_gettemperaturehumidity>
     3e2:	8f 3f       	cpi	r24, 0xFF	; 255
     3e4:	d9 f1       	breq	.+118    	; 0x45c <TempControl+0xc6>
			
			itoa(humidity,Humstr, 10);
     3e6:	80 91 41 02 	lds	r24, 0x0241
     3ea:	0f 2e       	mov	r0, r31
     3ec:	f2 e6       	ldi	r31, 0x62	; 98
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f2 e0       	ldi	r31, 0x02	; 2
     3f2:	ff 2e       	mov	r15, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	99 27       	eor	r25, r25
     3f8:	87 fd       	sbrc	r24, 7
     3fa:	90 95       	com	r25
     3fc:	b7 01       	movw	r22, r14
     3fe:	4a e0       	ldi	r20, 0x0A	; 10
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <itoa>
			dtostrf(temperature,4,1,Tempstr);
     406:	60 91 40 02 	lds	r22, 0x0240
     40a:	77 27       	eor	r23, r23
     40c:	67 fd       	sbrc	r22, 7
     40e:	70 95       	com	r23
     410:	87 2f       	mov	r24, r23
     412:	97 2f       	mov	r25, r23
     414:	0e 94 b5 0a 	call	0x156a	; 0x156a <__floatsisf>
     418:	c3 e4       	ldi	r28, 0x43	; 67
     41a:	d2 e0       	ldi	r29, 0x02	; 2
     41c:	44 e0       	ldi	r20, 0x04	; 4
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	8e 01       	movw	r16, r28
     422:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <dtostrf>
			
			LCDWriteStringXY(6,0,Humstr);
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     42e:	c7 01       	movw	r24, r14
     430:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
			LCDWriteStringXY(9,0,"% RH");
     434:	89 e0       	ldi	r24, 0x09	; 9
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     43c:	8b e6       	ldi	r24, 0x6B	; 107
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
			
			LCDWriteStringXY(6,1,Tempstr);
     444:	86 e0       	ldi	r24, 0x06	; 6
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     44c:	ce 01       	movw	r24, r28
     44e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
			//Lcd4_Write_Char(223);
			LCDWriteString("C");
     452:	80 e7       	ldi	r24, 0x70	; 112
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     45a:	1d c0       	rjmp	.+58     	; 0x496 <TempControl+0x100>
			//_delay_ms(1000);
			
			
		}
		else{
			LCDClear();
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
			
			LCDWriteStringXY(1,0,"Internal Error");
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     46c:	82 e7       	ldi	r24, 0x72	; 114
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
			
			LCDWriteStringXY(2,0,"Process Terminated");
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     47c:	81 e8       	ldi	r24, 0x81	; 129
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     484:	8f e3       	ldi	r24, 0x3F	; 63
     486:	9d e0       	ldi	r25, 0x0D	; 13
     488:	a3 e0       	ldi	r26, 0x03	; 3
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	90 40       	sbci	r25, 0x00	; 0
     48e:	a0 40       	sbci	r26, 0x00	; 0
     490:	e1 f7       	brne	.-8      	; 0x48a <TempControl+0xf4>
     492:	00 c0       	rjmp	.+0      	; 0x494 <TempControl+0xfe>
     494:	00 00       	nop
			//break;
		}
		//_delay_ms(1000);//check humidity every second
	}
	
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <main>:
}


	
int main(void)
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	ca 56       	subi	r28, 0x6A	; 106
     4ae:	d1 40       	sbci	r29, 0x01	; 1
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
	
	
	//Initialize LCD Module
	LCDInit(LS_NONE);
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCDInit>
	
	
	
	DDRA &=~(1<<PINA0);//initialize port A0 as input
     4c0:	d0 98       	cbi	0x1a, 0	; 26
	
	//PORTA |= (1<<PINA0);//remove if rain sensor does not work well
	
	InitADC();
     4c2:	0e 94 b5 01 	call	0x36a	; 0x36a <InitADC>
	
	LCDClear();
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	LCDWriteString("Team 4explorers");
     4ce:	84 e9       	ldi	r24, 0x94	; 148
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     4d6:	8f eb       	ldi	r24, 0xBF	; 191
     4d8:	97 e2       	ldi	r25, 0x27	; 39
     4da:	a9 e0       	ldi	r26, 0x09	; 9
     4dc:	81 50       	subi	r24, 0x01	; 1
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	a0 40       	sbci	r26, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <main+0x38>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <main+0x42>
     4e6:	00 00       	nop
	_delay_ms(3000);
	LCDClear();
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	LCDWriteString("Loading....");
     4f0:	84 ea       	ldi	r24, 0xA4	; 164
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     4f8:	8f e7       	ldi	r24, 0x7F	; 127
     4fa:	9a e1       	ldi	r25, 0x1A	; 26
     4fc:	a6 e0       	ldi	r26, 0x06	; 6
     4fe:	81 50       	subi	r24, 0x01	; 1
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	a0 40       	sbci	r26, 0x00	; 0
     504:	e1 f7       	brne	.-8      	; 0x4fe <main+0x5a>
     506:	00 c0       	rjmp	.+0      	; 0x508 <main+0x64>
     508:	00 00       	nop
	_delay_ms(2000);
	
	
	LCDClear();
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
     512:	8f eb       	ldi	r24, 0xBF	; 191
     514:	97 e2       	ldi	r25, 0x27	; 39
     516:	a9 e0       	ldi	r26, 0x09	; 9
     518:	81 50       	subi	r24, 0x01	; 1
     51a:	90 40       	sbci	r25, 0x00	; 0
     51c:	a0 40       	sbci	r26, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <main+0x74>
     520:	00 c0       	rjmp	.+0      	; 0x522 <main+0x7e>
     522:	00 00       	nop
	*/
	
	
	
	//Initialize SIM300 module
	LCDWriteString("GSM Initializing ...");
     524:	80 eb       	ldi	r24, 0xB0	; 176
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
	int8_t r= SIM300Init();
     52c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <SIM300Init>
     530:	8f e3       	ldi	r24, 0x3F	; 63
     532:	9d e0       	ldi	r25, 0x0D	; 13
     534:	a3 e0       	ldi	r26, 0x03	; 3
     536:	81 50       	subi	r24, 0x01	; 1
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	a0 40       	sbci	r26, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <main+0x92>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x9c>
     540:	00 00       	nop
	LCDWriteString(pname);
		
	_delay_ms(1000);
	*/
	uint8_t		x=0;
	LCDClear();
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	LCDWriteString("Waiting");
     54a:	85 ec       	ldi	r24, 0xC5	; 197
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
	
	//Wait for MSG
	uint8_t id;
	
	UFlushBuffer();
     552:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	while(1)
	{
		
		LCDClear();
	
		LCDWriteStringXY(0,0,"Waiting for msg");
     556:	0f 2e       	mov	r0, r31
     558:	fd ec       	ldi	r31, 0xCD	; 205
     55a:	ef 2e       	mov	r14, r31
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	ff 2e       	mov	r15, r31
     560:	f0 2d       	mov	r31, r0
			//if(x==15 || x==0) vx=vx*-1;
			
			TempControl(30);
		}
	
		LCDWriteStringXY(0,1,"MSG Received    ");
     562:	0f 2e       	mov	r0, r31
     564:	fd ed       	ldi	r31, 0xDD	; 221
     566:	cf 2e       	mov	r12, r31
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	df 2e       	mov	r13, r31
     56c:	f0 2d       	mov	r31, r0
			_delay_ms(3000);
			
		}	
		else
		{
			LCDWriteString("Err Reading Msg !");
     56e:	0f 2e       	mov	r0, r31
     570:	fe ee       	ldi	r31, 0xEE	; 238
     572:	6f 2e       	mov	r6, r31
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	7f 2e       	mov	r7, r31
     578:	f0 2d       	mov	r31, r0
	
		
	//Send MSG
	
	LCDClear();
	LCDWriteString("Sending Msg");
     57a:	0f 2e       	mov	r0, r31
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	af 2e       	mov	r10, r31
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	bf 2e       	mov	r11, r31
     584:	f0 2d       	mov	r31, r0
	_delay_ms(2000);
	uint8_t ref;
	
	char msgSend[60] = "";
		
	strcat(msgSend,"Humidity :");
     586:	0f 2e       	mov	r0, r31
     588:	fc e0       	ldi	r31, 0x0C	; 12
     58a:	8f 2e       	mov	r8, r31
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	9f 2e       	mov	r9, r31
     590:	f0 2d       	mov	r31, r0
		//_delay_ms(1000); //3 second delay
		//PORTD |=(1<<PIND7); //Turns OFF buzzer
		//_delay_ms(1000);
	}else
	{
		strcat(msgSend,"Not Raining");
     592:	0f 2e       	mov	r0, r31
     594:	f0 e3       	ldi	r31, 0x30	; 48
     596:	4f 2e       	mov	r4, r31
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	5f 2e       	mov	r5, r31
     59c:	f0 2d       	mov	r31, r0
	strcat(msgSend,"Temperature :");
	strcat(msgSend,Tempstr);
	strcat(msgSend,"C ");
	if(bit_is_clear(PINA,0)) //If rain is came
	{
		strcat(msgSend,"Raining");
     59e:	0f 2e       	mov	r0, r31
     5a0:	f8 e2       	ldi	r31, 0x28	; 40
     5a2:	2f 2e       	mov	r2, r31
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
     5a6:	3f 2e       	mov	r3, r31
     5a8:	f0 2d       	mov	r31, r0
	UFlushBuffer();
	
	while(1)
	{
		
		LCDClear();
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	
		LCDWriteStringXY(0,0,"Waiting for msg");
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     5ba:	c7 01       	movw	r24, r14
     5bc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
	
		x=0;
		int8_t vx=1;
		
		while(SIM300WaitForMsg(&id)!=SIM300_OK)
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <main+0x126>
			
			//x+=vx;
			
			//if(x==15 || x==0) vx=vx*-1;
			
			TempControl(30);
     5c2:	8e e1       	ldi	r24, 0x1E	; 30
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 cb 01 	call	0x396	; 0x396 <TempControl>
		LCDWriteStringXY(0,0,"Waiting for msg");
	
		x=0;
		int8_t vx=1;
		
		while(SIM300WaitForMsg(&id)!=SIM300_OK)
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 06 08 	call	0x100c	; 0x100c <SIM300WaitForMsg>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	b1 f7       	brne	.-20     	; 0x5c2 <main+0x11e>
			//if(x==15 || x==0) vx=vx*-1;
			
			TempControl(30);
		}
	
		LCDWriteStringXY(0,1,"MSG Received    ");
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     5de:	c6 01       	movw	r24, r12
     5e0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     5e4:	8f e3       	ldi	r24, 0x3F	; 63
     5e6:	9d e0       	ldi	r25, 0x0D	; 13
     5e8:	a3 e0       	ldi	r26, 0x03	; 3
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	90 40       	sbci	r25, 0x00	; 0
     5ee:	a0 40       	sbci	r26, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x146>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0x150>
     5f4:	00 00       	nop
		
		_delay_ms(1000);
		
		//Now read and display msg
		LCDClear();
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
		char msg[300];
		
		r=SIM300ReadMsg(id,msg);
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	be 01       	movw	r22, r28
     602:	61 5c       	subi	r22, 0xC1	; 193
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	0e 94 47 08 	call	0x108e	; 0x108e <SIM300ReadMsg>
		
	
		if(r==SIM300_OK)
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	91 f4       	brne	.+36     	; 0x632 <main+0x18e>
		{
			
			LCDWriteStringXY(0,0,msg);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     616:	ce 01       	movw	r24, r28
     618:	cf 96       	adiw	r24, 0x3f	; 63
     61a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     61e:	8f eb       	ldi	r24, 0xBF	; 191
     620:	97 e2       	ldi	r25, 0x27	; 39
     622:	a9 e0       	ldi	r26, 0x09	; 9
     624:	81 50       	subi	r24, 0x01	; 1
     626:	90 40       	sbci	r25, 0x00	; 0
     628:	a0 40       	sbci	r26, 0x00	; 0
     62a:	e1 f7       	brne	.-8      	; 0x624 <main+0x180>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0x18a>
     62e:	00 00       	nop
     630:	0c c0       	rjmp	.+24     	; 0x64a <main+0x1a6>
			_delay_ms(3000);
			
		}	
		else
		{
			LCDWriteString("Err Reading Msg !");
     632:	c3 01       	movw	r24, r6
     634:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     638:	8f eb       	ldi	r24, 0xBF	; 191
     63a:	97 e2       	ldi	r25, 0x27	; 39
     63c:	a9 e0       	ldi	r26, 0x09	; 9
     63e:	81 50       	subi	r24, 0x01	; 1
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	a0 40       	sbci	r26, 0x00	; 0
     644:	e1 f7       	brne	.-8      	; 0x63e <main+0x19a>
     646:	00 c0       	rjmp	.+0      	; 0x648 <main+0x1a4>
     648:	00 00       	nop
		}
	
		
	//Send MSG
	
	LCDClear();
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	LCDWriteString("Sending Msg");
     652:	c5 01       	movw	r24, r10
     654:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     658:	8f e7       	ldi	r24, 0x7F	; 127
     65a:	9a e1       	ldi	r25, 0x1A	; 26
     65c:	a6 e0       	ldi	r26, 0x06	; 6
     65e:	81 50       	subi	r24, 0x01	; 1
     660:	90 40       	sbci	r25, 0x00	; 0
     662:	a0 40       	sbci	r26, 0x00	; 0
     664:	e1 f7       	brne	.-8      	; 0x65e <main+0x1ba>
     666:	00 c0       	rjmp	.+0      	; 0x668 <main+0x1c4>
     668:	00 00       	nop
	_delay_ms(2000);
	uint8_t ref;
	
	char msgSend[60] = "";
     66a:	1b 82       	std	Y+3, r1	; 0x03
     66c:	1c 82       	std	Y+4, r1	; 0x04
     66e:	1d 82       	std	Y+5, r1	; 0x05
     670:	1e 82       	std	Y+6, r1	; 0x06
     672:	fe 01       	movw	r30, r28
     674:	37 96       	adiw	r30, 0x07	; 7
     676:	88 e3       	ldi	r24, 0x38	; 56
     678:	df 01       	movw	r26, r30
     67a:	1d 92       	st	X+, r1
     67c:	8a 95       	dec	r24
     67e:	e9 f7       	brne	.-6      	; 0x67a <main+0x1d6>
		
	strcat(msgSend,"Humidity :");
     680:	fe 01       	movw	r30, r28
     682:	33 96       	adiw	r30, 0x03	; 3
     684:	01 90       	ld	r0, Z+
     686:	00 20       	and	r0, r0
     688:	e9 f7       	brne	.-6      	; 0x684 <main+0x1e0>
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	d4 01       	movw	r26, r8
     68e:	8b e0       	ldi	r24, 0x0B	; 11
     690:	0d 90       	ld	r0, X+
     692:	01 92       	st	Z+, r0
     694:	81 50       	subi	r24, 0x01	; 1
     696:	e1 f7       	brne	.-8      	; 0x690 <main+0x1ec>
	strcat(msgSend,Humstr);
     698:	8e 01       	movw	r16, r28
     69a:	0d 5f       	subi	r16, 0xFD	; 253
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	c8 01       	movw	r24, r16
     6a0:	62 e6       	ldi	r22, 0x62	; 98
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	0e 94 46 0c 	call	0x188c	; 0x188c <strcat>
	strcat(msgSend,"%");
     6a8:	f8 01       	movw	r30, r16
     6aa:	01 90       	ld	r0, Z+
     6ac:	00 20       	and	r0, r0
     6ae:	e9 f7       	brne	.-6      	; 0x6aa <main+0x206>
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	85 e2       	ldi	r24, 0x25	; 37
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	91 83       	std	Z+1, r25	; 0x01
     6b8:	80 83       	st	Z, r24
	strcat(msgSend," , ");
     6ba:	f8 01       	movw	r30, r16
     6bc:	01 90       	ld	r0, Z+
     6be:	00 20       	and	r0, r0
     6c0:	e9 f7       	brne	.-6      	; 0x6bc <main+0x218>
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	80 e2       	ldi	r24, 0x20	; 32
     6c6:	9c e2       	ldi	r25, 0x2C	; 44
     6c8:	a0 e2       	ldi	r26, 0x20	; 32
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	80 83       	st	Z, r24
     6ce:	91 83       	std	Z+1, r25	; 0x01
     6d0:	a2 83       	std	Z+2, r26	; 0x02
     6d2:	b3 83       	std	Z+3, r27	; 0x03
	strcat(msgSend,"Temperature :");
     6d4:	f8 01       	movw	r30, r16
     6d6:	01 90       	ld	r0, Z+
     6d8:	00 20       	and	r0, r0
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <main+0x232>
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	a7 e1       	ldi	r26, 0x17	; 23
     6e0:	b1 e0       	ldi	r27, 0x01	; 1
     6e2:	8e e0       	ldi	r24, 0x0E	; 14
     6e4:	0d 90       	ld	r0, X+
     6e6:	01 92       	st	Z+, r0
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <main+0x240>
	strcat(msgSend,Tempstr);
     6ec:	8e 01       	movw	r16, r28
     6ee:	0d 5f       	subi	r16, 0xFD	; 253
     6f0:	1f 4f       	sbci	r17, 0xFF	; 255
     6f2:	c8 01       	movw	r24, r16
     6f4:	63 e4       	ldi	r22, 0x43	; 67
     6f6:	72 e0       	ldi	r23, 0x02	; 2
     6f8:	0e 94 46 0c 	call	0x188c	; 0x188c <strcat>
	strcat(msgSend,"C ");
     6fc:	f8 01       	movw	r30, r16
     6fe:	01 90       	ld	r0, Z+
     700:	00 20       	and	r0, r0
     702:	e9 f7       	brne	.-6      	; 0x6fe <main+0x25a>
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	a5 e2       	ldi	r26, 0x25	; 37
     708:	b1 e0       	ldi	r27, 0x01	; 1
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	0d 90       	ld	r0, X+
     70e:	01 92       	st	Z+, r0
     710:	81 50       	subi	r24, 0x01	; 1
     712:	e1 f7       	brne	.-8      	; 0x70c <main+0x268>
	if(bit_is_clear(PINA,0)) //If rain is came
     714:	c8 99       	sbic	0x19, 0	; 25
     716:	0d c0       	rjmp	.+26     	; 0x732 <main+0x28e>
	{
		strcat(msgSend,"Raining");
     718:	fe 01       	movw	r30, r28
     71a:	33 96       	adiw	r30, 0x03	; 3
     71c:	01 90       	ld	r0, Z+
     71e:	00 20       	and	r0, r0
     720:	e9 f7       	brne	.-6      	; 0x71c <main+0x278>
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	d1 01       	movw	r26, r2
     726:	88 e0       	ldi	r24, 0x08	; 8
     728:	0d 90       	ld	r0, X+
     72a:	01 92       	st	Z+, r0
     72c:	81 50       	subi	r24, 0x01	; 1
     72e:	e1 f7       	brne	.-8      	; 0x728 <main+0x284>
     730:	0c c0       	rjmp	.+24     	; 0x74a <main+0x2a6>
		//_delay_ms(1000); //3 second delay
		//PORTD |=(1<<PIND7); //Turns OFF buzzer
		//_delay_ms(1000);
	}else
	{
		strcat(msgSend,"Not Raining");
     732:	fe 01       	movw	r30, r28
     734:	33 96       	adiw	r30, 0x03	; 3
     736:	01 90       	ld	r0, Z+
     738:	00 20       	and	r0, r0
     73a:	e9 f7       	brne	.-6      	; 0x736 <main+0x292>
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	d2 01       	movw	r26, r4
     740:	8c e0       	ldi	r24, 0x0C	; 12
     742:	0d 90       	ld	r0, X+
     744:	01 92       	st	Z+, r0
     746:	81 50       	subi	r24, 0x01	; 1
     748:	e1 f7       	brne	.-8      	; 0x742 <main+0x29e>
	}
	LCDClear();
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	//LCDWriteString(msgSend);
	//_delay_ms(5000);

	
	r=SIM300SendMsg("+94788801863",msgSend,&ref);//Change phone number to some valid value!
     752:	8c e3       	ldi	r24, 0x3C	; 60
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	be 01       	movw	r22, r28
     758:	6d 5f       	subi	r22, 0xFD	; 253
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	ae 01       	movw	r20, r28
     75e:	4e 5f       	subi	r20, 0xFE	; 254
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	0e 94 c2 08 	call	0x1184	; 0x1184 <SIM300SendMsg>
     766:	18 2f       	mov	r17, r24
     768:	8f e7       	ldi	r24, 0x7F	; 127
     76a:	9a e1       	ldi	r25, 0x1A	; 26
     76c:	a6 e0       	ldi	r26, 0x06	; 6
     76e:	81 50       	subi	r24, 0x01	; 1
     770:	90 40       	sbci	r25, 0x00	; 0
     772:	a0 40       	sbci	r26, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <main+0x2ca>
     776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x2d4>
     778:	00 00       	nop
	_delay_ms(2000);
	
	LCDWriteStringXY(0,1,"Success");
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     782:	89 e4       	ldi	r24, 0x49	; 73
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
	LCDWriteIntXY(9,1,ref,3);
     78a:	89 e0       	ldi	r24, 0x09	; 9
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     792:	8a 81       	ldd	r24, Y+2	; 0x02
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	63 e0       	ldi	r22, 0x03	; 3
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	0e 94 13 05 	call	0xa26	; 0xa26 <LCDWriteInt>
	
	
	if(r==SIM300_OK)
     79e:	11 30       	cpi	r17, 0x01	; 1
     7a0:	99 f4       	brne	.+38     	; 0x7c8 <main+0x324>
	{
		LCDWriteStringXY(0,1,"Success");
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     7aa:	89 e4       	ldi	r24, 0x49	; 73
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
		LCDWriteIntXY(9,1,ref,3);
     7b2:	89 e0       	ldi	r24, 0x09	; 9
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	63 e0       	ldi	r22, 0x03	; 3
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	0e 94 13 05 	call	0xa26	; 0xa26 <LCDWriteInt>
     7c6:	13 c0       	rjmp	.+38     	; 0x7ee <main+0x34a>
	}
	else if(r==SIM300_TIMEOUT)
     7c8:	1d 3f       	cpi	r17, 0xFD	; 253
     7ca:	49 f4       	brne	.+18     	; 0x7de <main+0x33a>
	{
		LCDWriteStringXY(0,1,"Time out !");
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     7d4:	81 e5       	ldi	r24, 0x51	; 81
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     7dc:	08 c0       	rjmp	.+16     	; 0x7ee <main+0x34a>
	}
	else
	{
		LCDWriteStringXY(0,1,"Fail  !");	
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     7e6:	8c e5       	ldi	r24, 0x5C	; 92
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     7ee:	8f e7       	ldi	r24, 0x7F	; 127
     7f0:	9a e1       	ldi	r25, 0x1A	; 26
     7f2:	a6 e0       	ldi	r26, 0x06	; 6
     7f4:	81 50       	subi	r24, 0x01	; 1
     7f6:	90 40       	sbci	r25, 0x00	; 0
     7f8:	a0 40       	sbci	r26, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <main+0x350>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <main+0x35a>
     7fe:	00 00       	nop
	_delay_ms(1000);
	*/
	
		
		//Finally delete the msg
		if (SIM300DeleteMsg(id)!=SIM300_OK)
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	0e 94 ae 07 	call	0xf5c	; 0xf5c <SIM300DeleteMsg>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f4       	brne	.+2      	; 0x80c <main+0x368>
     80a:	cf ce       	rjmp	.-610    	; 0x5aa <main+0x106>
		{
			LCDWriteString("Err Deleting Msg !");
     80c:	84 e6       	ldi	r24, 0x64	; 100
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     814:	8f eb       	ldi	r24, 0xBF	; 191
     816:	97 e2       	ldi	r25, 0x27	; 39
     818:	a9 e0       	ldi	r26, 0x09	; 9
     81a:	81 50       	subi	r24, 0x01	; 1
     81c:	90 40       	sbci	r25, 0x00	; 0
     81e:	a0 40       	sbci	r26, 0x00	; 0
     820:	e1 f7       	brne	.-8      	; 0x81a <main+0x376>
     822:	00 c0       	rjmp	.+0      	; 0x824 <main+0x380>
     824:	00 00       	nop
     826:	c1 ce       	rjmp	.-638    	; 0x5aa <main+0x106>

00000828 <TempControl1>:
		//_delay_ms(1000);//check humidity every second
	}
	
}

void TempControl1(){
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	00 d0       	rcall	.+0      	; 0x82e <TempControl1+0x6>
     82e:	00 d0       	rcall	.+0      	; 0x830 <TempControl1+0x8>
     830:	0f 92       	push	r0
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
	char t[5];
	LCDClear();
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
		double temperature=(adc_result0/1024.0*500)-6;
		dtostrf(temperature,5,0,t);
		
		LCDClear();
		
		LCDWriteStringXY(1,0,"Temperature");
     83e:	0f 2e       	mov	r0, r31
     840:	f7 e7       	ldi	r31, 0x77	; 119
     842:	af 2e       	mov	r10, r31
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	bf 2e       	mov	r11, r31
     848:	f0 2d       	mov	r31, r0
		
		LCDWriteStringXY(2,1,t);
		//Lcd4_Write_Char(223);
		LCDWriteString("C");
     84a:	0f 2e       	mov	r0, r31
     84c:	f0 e7       	ldi	r31, 0x70	; 112
     84e:	8f 2e       	mov	r8, r31
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	9f 2e       	mov	r9, r31
     854:	f0 2d       	mov	r31, r0
void TempControl1(){
	char t[5];
	LCDClear();
	while(1)
	{
		ReadADC(0);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 ba 01 	call	0x374	; 0x374 <ReadADC>
		adc_result0=ADC;
     85c:	64 b1       	in	r22, 0x04	; 4
     85e:	75 b1       	in	r23, 0x05	; 5
     860:	70 93 61 02 	sts	0x0261, r23
     864:	60 93 60 02 	sts	0x0260, r22
		double temperature=(adc_result0/1024.0*500)-6;
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__floatunsisf>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	5a e3       	ldi	r21, 0x3A	; 58
     878:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__mulsf3>
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	4a ef       	ldi	r20, 0xFA	; 250
     882:	53 e4       	ldi	r21, 0x43	; 67
     884:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__mulsf3>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 ec       	ldi	r20, 0xC0	; 192
     88e:	50 e4       	ldi	r21, 0x40	; 64
     890:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     894:	f6 2e       	mov	r15, r22
     896:	e7 2e       	mov	r14, r23
     898:	d8 2e       	mov	r13, r24
     89a:	c9 2e       	mov	r12, r25
		dtostrf(temperature,5,0,t);
     89c:	86 2f       	mov	r24, r22
     89e:	9e 2d       	mov	r25, r14
     8a0:	ad 2d       	mov	r26, r13
     8a2:	bc 2d       	mov	r27, r12
     8a4:	bc 01       	movw	r22, r24
     8a6:	cd 01       	movw	r24, r26
     8a8:	45 e0       	ldi	r20, 0x05	; 5
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	8e 01       	movw	r16, r28
     8ae:	0f 5f       	subi	r16, 0xFF	; 255
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255
     8b2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <dtostrf>
		
		LCDClear();
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
		
		LCDWriteStringXY(1,0,"Temperature");
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     8c6:	c5 01       	movw	r24, r10
     8c8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
		
		LCDWriteStringXY(2,1,t);
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
		//Lcd4_Write_Char(223);
		LCDWriteString("C");
     8da:	c4 01       	movw	r24, r8
     8dc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDWriteString>
     8e0:	8f e9       	ldi	r24, 0x9F	; 159
     8e2:	96 e8       	ldi	r25, 0x86	; 134
     8e4:	a1 e0       	ldi	r26, 0x01	; 1
     8e6:	81 50       	subi	r24, 0x01	; 1
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	a0 40       	sbci	r26, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
     8f0:	00 00       	nop
		_delay_ms(500);
		
		if (temperature>60.0&&temperature<80.0)
     8f2:	8f 2d       	mov	r24, r15
     8f4:	9e 2d       	mov	r25, r14
     8f6:	ad 2d       	mov	r26, r13
     8f8:	bc 2d       	mov	r27, r12
     8fa:	bc 01       	movw	r22, r24
     8fc:	cd 01       	movw	r24, r26
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e7       	ldi	r20, 0x70	; 112
     904:	52 e4       	ldi	r21, 0x42	; 66
     906:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__gesf2>
     90a:	18 16       	cp	r1, r24
     90c:	8c f4       	brge	.+34     	; 0x930 <__stack+0xd1>
     90e:	8f 2d       	mov	r24, r15
     910:	9e 2d       	mov	r25, r14
     912:	ad 2d       	mov	r26, r13
     914:	bc 2d       	mov	r27, r12
     916:	bc 01       	movw	r22, r24
     918:	cd 01       	movw	r24, r26
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 ea       	ldi	r20, 0xA0	; 160
     920:	52 e4       	ldi	r21, 0x42	; 66
     922:	0e 94 af 0a 	call	0x155e	; 0x155e <__cmpsf2>
     926:	88 23       	and	r24, r24
     928:	1c f4       	brge	.+6      	; 0x930 <__stack+0xd1>
		{
			PORTC &=~(1<<PINC0);
     92a:	a8 98       	cbi	0x15, 0	; 21
			PORTC &=~(1<<PINC1);
     92c:	a9 98       	cbi	0x15, 1	; 21
     92e:	93 cf       	rjmp	.-218    	; 0x856 <TempControl1+0x2e>
		}
		else if (temperature>80.0)
     930:	8f 2d       	mov	r24, r15
     932:	9e 2d       	mov	r25, r14
     934:	ad 2d       	mov	r26, r13
     936:	bc 2d       	mov	r27, r12
     938:	bc 01       	movw	r22, r24
     93a:	cd 01       	movw	r24, r26
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 ea       	ldi	r20, 0xA0	; 160
     942:	52 e4       	ldi	r21, 0x42	; 66
     944:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__gesf2>
     948:	18 16       	cp	r1, r24
     94a:	1c f4       	brge	.+6      	; 0x952 <__stack+0xf3>
		{
			PORTC |=(1<<PINC0);
     94c:	a8 9a       	sbi	0x15, 0	; 21
			PORTC |=(1<<PINC1);
     94e:	a9 9a       	sbi	0x15, 1	; 21
     950:	82 cf       	rjmp	.-252    	; 0x856 <TempControl1+0x2e>
		}
		else
		{
            PORTC |= (1<<PINC0); 
     952:	a8 9a       	sbi	0x15, 0	; 21
			PORTC &=~(1<<PINC0);  
     954:	a8 98       	cbi	0x15, 0	; 21
     956:	7f cf       	rjmp	.-258    	; 0x856 <TempControl1+0x2e>

00000958 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     958:	87 b3       	in	r24, 0x17	; 23
     95a:	80 7f       	andi	r24, 0xF0	; 240
     95c:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
     95e:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
     960:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     962:	00 00       	nop

	
	do
	{

		SET_E();
     964:	c4 9a       	sbi	0x18, 4	; 24
     966:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
     968:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     96a:	82 95       	swap	r24
     96c:	80 7f       	andi	r24, 0xF0	; 240
     96e:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     970:	c4 98       	cbi	0x18, 4	; 24
     972:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
     974:	c4 9a       	sbi	0x18, 4	; 24
     976:	00 00       	nop
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
     978:	96 b3       	in	r25, 0x16	; 22
     97a:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     97c:	c4 98       	cbi	0x18, 4	; 24
     97e:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
     980:	88 23       	and	r24, r24
     982:	84 f3       	brlt	.-32     	; 0x964 <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
     984:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     986:	87 b3       	in	r24, 0x17	; 23
     988:	8f 60       	ori	r24, 0x0F	; 15
     98a:	87 bb       	out	0x17, r24	; 23

}
     98c:	08 95       	ret

0000098e <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     98e:	28 2f       	mov	r18, r24
     990:	22 95       	swap	r18
     992:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     994:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     996:	66 23       	and	r22, r22
     998:	11 f4       	brne	.+4      	; 0x99e <LCDByte+0x10>
	CLEAR_RS();
     99a:	93 98       	cbi	0x12, 3	; 18
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <LCDByte+0x12>
else
	SET_RS();
     99e:	93 9a       	sbi	0x12, 3	; 18
     9a0:	00 00       	nop

_delay_us(0.500);		//tAS

SET_E();
     9a2:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     9a4:	98 b3       	in	r25, 0x18	; 24
     9a6:	90 7f       	andi	r25, 0xF0	; 240
     9a8:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     9aa:	98 bb       	out	0x18, r25	; 24
     9ac:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     9ae:	c4 98       	cbi	0x18, 4	; 24
     9b0:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     9b2:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     9b4:	98 b3       	in	r25, 0x18	; 24
     9b6:	90 7f       	andi	r25, 0xF0	; 240
     9b8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     9ba:	88 bb       	out	0x18, r24	; 24
     9bc:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     9be:	c4 98       	cbi	0x18, 4	; 24
     9c0:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     9c2:	0e 94 ac 04 	call	0x958	; 0x958 <LCDBusyLoop>
}
     9c6:	08 95       	ret

000009c8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	88 23       	and	r24, r24
     9d8:	09 f1       	breq	.+66     	; 0xa1c <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
     9da:	85 32       	cpi	r24, 0x25	; 37
     9dc:	a9 f4       	brne	.+42     	; 0xa08 <LCDWriteString+0x40>
	{
		msg++;
     9de:	e8 01       	movw	r28, r16
     9e0:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     9e2:	f8 01       	movw	r30, r16
     9e4:	81 81       	ldd	r24, Z+1	; 0x01
     9e6:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     9e8:	88 30       	cpi	r24, 0x08	; 8
     9ea:	20 f4       	brcc	.+8      	; 0x9f4 <LCDWriteString+0x2c>
		{
			LCDData(cc);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
     9f2:	0e c0       	rjmp	.+28     	; 0xa10 <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
     9f4:	85 e2       	ldi	r24, 0x25	; 37
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
			LCDData(*msg);
     9fc:	f8 01       	movw	r30, r16
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
     a0e:	e8 01       	movw	r28, r16
	}
	msg++;
     a10:	8e 01       	movw	r16, r28
     a12:	0f 5f       	subi	r16, 0xFF	; 255
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	88 23       	and	r24, r24
     a1a:	f9 f6       	brne	.-66     	; 0x9da <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	00 d0       	rcall	.+0      	; 0xa34 <LCDWriteInt+0xe>
     a34:	00 d0       	rcall	.+0      	; 0xa36 <LCDWriteInt+0x10>
     a36:	0f 92       	push	r0
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     a3e:	fe 01       	movw	r30, r28
     a40:	31 96       	adiw	r30, 0x01	; 1
     a42:	25 e0       	ldi	r18, 0x05	; 5
     a44:	df 01       	movw	r26, r30
     a46:	1d 92       	st	X+, r1
     a48:	2a 95       	dec	r18
     a4a:	e9 f7       	brne	.-6      	; 0xa46 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	61 f0       	breq	.+24     	; 0xa68 <LCDWriteInt+0x42>
     a50:	fe 01       	movw	r30, r28
     a52:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
     a54:	2a e0       	ldi	r18, 0x0A	; 10
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	b9 01       	movw	r22, r18
     a5a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divmodhi4>
     a5e:	82 93       	st	-Z, r24
	val=val/10;
     a60:	86 2f       	mov	r24, r22
     a62:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	c1 f7       	brne	.-16     	; 0xa58 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     a68:	bf ef       	ldi	r27, 0xFF	; 255
     a6a:	eb 16       	cp	r14, r27
     a6c:	bf ef       	ldi	r27, 0xFF	; 255
     a6e:	fb 06       	cpc	r15, r27
     a70:	69 f4       	brne	.+26     	; 0xa8c <LCDWriteInt+0x66>
		while(str[j]==0) j++;
     a72:	29 81       	ldd	r18, Y+1	; 0x01
     a74:	22 23       	and	r18, r18
     a76:	79 f4       	brne	.+30     	; 0xa96 <LCDWriteInt+0x70>
     a78:	fe 01       	movw	r30, r28
     a7a:	32 96       	adiw	r30, 0x02	; 2
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	0f 5f       	subi	r16, 0xFF	; 255
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
     a84:	21 91       	ld	r18, Z+
     a86:	22 23       	and	r18, r18
     a88:	d9 f3       	breq	.-10     	; 0xa80 <LCDWriteInt+0x5a>
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <LCDWriteInt+0x74>
	else
		j=5-field_length;
     a8c:	05 e0       	ldi	r16, 0x05	; 5
     a8e:	10 e0       	ldi	r17, 0x00	; 0
     a90:	0e 19       	sub	r16, r14
     a92:	1f 09       	sbc	r17, r15
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <LCDWriteInt+0x74>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     a96:	00 e0       	ldi	r16, 0x00	; 0
     a98:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
     a9a:	99 23       	and	r25, r25
     a9c:	24 f4       	brge	.+8      	; 0xaa6 <LCDWriteInt+0x80>
     a9e:	8d e2       	ldi	r24, 0x2D	; 45
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	for(i=j;i<5;i++)
     aa6:	05 30       	cpi	r16, 0x05	; 5
     aa8:	11 05       	cpc	r17, r1
     aaa:	bc f4       	brge	.+46     	; 0xada <LCDWriteInt+0xb4>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
     aac:	e1 e0       	ldi	r30, 0x01	; 1
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	ec 0f       	add	r30, r28
     ab2:	fd 1f       	adc	r31, r29
     ab4:	0e 0f       	add	r16, r30
     ab6:	1f 1f       	adc	r17, r31
     ab8:	0f 2e       	mov	r0, r31
     aba:	f6 e0       	ldi	r31, 0x06	; 6
     abc:	ef 2e       	mov	r14, r31
     abe:	ff 24       	eor	r15, r15
     ac0:	f0 2d       	mov	r31, r0
     ac2:	ec 0e       	add	r14, r28
     ac4:	fd 1e       	adc	r15, r29
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     ac6:	d8 01       	movw	r26, r16
     ac8:	8d 91       	ld	r24, X+
     aca:	8d 01       	movw	r16, r26
     acc:	80 5d       	subi	r24, 0xD0	; 208
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     ad4:	0e 15       	cp	r16, r14
     ad6:	1f 05       	cpc	r17, r15
     ad8:	b1 f7       	brne	.-20     	; 0xac6 <LCDWriteInt+0xa0>
	{
	LCDData(48+str[i]);
	}
}
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     af2:	84 31       	cpi	r24, 0x14	; 20
     af4:	78 f4       	brcc	.+30     	; 0xb14 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
     af6:	62 30       	cpi	r22, 0x02	; 2
     af8:	31 f0       	breq	.+12     	; 0xb06 <LCDGotoXY+0x14>
     afa:	63 30       	cpi	r22, 0x03	; 3
     afc:	31 f0       	breq	.+12     	; 0xb0a <LCDGotoXY+0x18>
     afe:	61 30       	cpi	r22, 0x01	; 1
     b00:	29 f4       	brne	.+10     	; 0xb0c <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     b02:	80 64       	ori	r24, 0x40	; 64
			break;
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
     b06:	8c 5e       	subi	r24, 0xEC	; 236
			break;
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
     b0a:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
     b0c:	80 68       	ori	r24, 0x80	; 128
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
     b14:	08 95       	ret

00000b16 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b20:	8b e4       	ldi	r24, 0x4B	; 75
     b22:	9d e1       	ldi	r25, 0x1D	; 29
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCDInit+0xe>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <LCDInit+0x14>
     b2a:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     b2c:	87 b3       	in	r24, 0x17	; 23
     b2e:	8f 60       	ori	r24, 0x0F	; 15
     b30:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     b32:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     b34:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     b36:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     b38:	88 b3       	in	r24, 0x18	; 24
     b3a:	80 7f       	andi	r24, 0xF0	; 240
     b3c:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     b3e:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
     b40:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
     b42:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b44:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     b46:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     b48:	c1 9a       	sbi	0x18, 1	; 24
     b4a:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
     b4c:	c4 98       	cbi	0x18, 4	; 24
     b4e:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     b50:	0e 94 ac 04 	call	0x958	; 0x958 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     b54:	8c 2f       	mov	r24, r28
     b56:	8c 60       	ori	r24, 0x0C	; 12
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     b5e:	88 e2       	ldi	r24, 0x28	; 40
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     b66:	80 e4       	ldi	r24, 0x40	; 64
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>
     b6e:	c9 e8       	ldi	r28, 0x89	; 137
     b70:	d1 e0       	ldi	r29, 0x01	; 1
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
     b72:	09 ec       	ldi	r16, 0xC9	; 201
     b74:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     b76:	89 91       	ld	r24, Y+
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 c7 04 	call	0x98e	; 0x98e <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     b7e:	c0 17       	cp	r28, r16
     b80:	d1 07       	cpc	r29, r17
     b82:	c9 f7       	brne	.-14     	; 0xb76 <LCDInit+0x60>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	0e 94 79 05 	call	0xaf2	; 0xaf2 <LCDGotoXY>

}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <SIM300Cmd>:
	return SIM300_TIMEOUT;
			
}

int8_t SIM300Cmd(const char *cmd)
{
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	08 2f       	mov	r16, r24
     ba2:	c9 2f       	mov	r28, r25
	UWriteString(cmd);	//Send Command
     ba4:	0e 94 15 0a 	call	0x142a	; 0x142a <UWriteString>
	UWriteData(0x0D);	//CR
     ba8:	8d e0       	ldi	r24, 0x0D	; 13
     baa:	0e 94 ef 09 	call	0x13de	; 0x13de <UWriteData>
	
	uint8_t len=strlen(cmd);
     bae:	e0 2f       	mov	r30, r16
     bb0:	fc 2f       	mov	r31, r28
     bb2:	df 01       	movw	r26, r30
     bb4:	0d 90       	ld	r0, X+
     bb6:	00 20       	and	r0, r0
     bb8:	e9 f7       	brne	.-6      	; 0xbb4 <SIM300Cmd+0x1e>
	
	len++;	//Add 1 for trailing CR added to all commands
     bba:	fa 2e       	mov	r15, r26
     bbc:	f0 1a       	sub	r15, r16
	
	uint16_t i=0;
	
	//Wait for echo
	while(i<10*len)
     bbe:	cf 2d       	mov	r28, r15
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	d9 2f       	mov	r29, r25
     bc4:	ce 01       	movw	r24, r28
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	ec 01       	movw	r28, r24
     bcc:	cc 0f       	add	r28, r28
     bce:	dd 1f       	adc	r29, r29
     bd0:	cc 0f       	add	r28, r28
     bd2:	dd 1f       	adc	r29, r29
     bd4:	c8 0f       	add	r28, r24
     bd6:	d9 1f       	adc	r29, r25
     bd8:	20 97       	sbiw	r28, 0x00	; 0
     bda:	d9 f0       	breq	.+54     	; 0xc12 <SIM300Cmd+0x7c>
	
	uint8_t len=strlen(cmd);
	
	len++;	//Add 1 for trailing CR added to all commands
	
	uint16_t i=0;
     bdc:	00 e0       	ldi	r16, 0x00	; 0
     bde:	10 e0       	ldi	r17, 0x00	; 0
	
	//Wait for echo
	while(i<10*len)
	{
		if(UDataAvailable()<len)
     be0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
     be4:	8f 15       	cp	r24, r15
     be6:	68 f4       	brcc	.+26     	; 0xc02 <SIM300Cmd+0x6c>
		{
			i++;
     be8:	0f 5f       	subi	r16, 0xFF	; 255
     bea:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bec:	83 ec       	ldi	r24, 0xC3	; 195
     bee:	99 e0       	ldi	r25, 0x09	; 9
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <SIM300Cmd+0x5a>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <SIM300Cmd+0x60>
     bf6:	00 00       	nop
	len++;	//Add 1 for trailing CR added to all commands
	
	uint16_t i=0;
	
	//Wait for echo
	while(i<10*len)
     bf8:	0c 17       	cp	r16, r28
     bfa:	1d 07       	cpc	r17, r29
     bfc:	89 f7       	brne	.-30     	; 0xbe0 <SIM300Cmd+0x4a>
			return SIM300_OK;
			
		}
	}
	
	return SIM300_TIMEOUT;
     bfe:	8d ef       	ldi	r24, 0xFD	; 253
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <SIM300Cmd+0x7e>
		}
		else
		{
			//We got an echo
			//Now check it
			UReadBuffer(sim300_buffer,len);	//Read serial Data
     c02:	8f ea       	ldi	r24, 0xAF	; 175
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	6f 2d       	mov	r22, r15
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	0e 94 24 0a 	call	0x1448	; 0x1448 <UReadBuffer>
			
			return SIM300_OK;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <SIM300Cmd+0x7e>
			
		}
	}
	
	return SIM300_TIMEOUT;
     c12:	8d ef       	ldi	r24, 0xFD	; 253
			
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	08 95       	ret

00000c20 <SIM300CheckResponse>:

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
{
     c20:	fc 01       	movw	r30, r24
	len-=2;
	
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 81       	ld	r25, Z
     c26:	9d 30       	cpi	r25, 0x0D	; 13
     c28:	09 f4       	brne	.+2      	; 0xc2c <SIM300CheckResponse+0xc>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	88 23       	and	r24, r24
     c2e:	b1 f5       	brne	.+108    	; 0xc9c <SIM300CheckResponse+0x7c>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	9a 30       	cpi	r25, 0x0A	; 10
     c36:	09 f4       	brne	.+2      	; 0xc3a <SIM300CheckResponse+0x1a>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	88 23       	and	r24, r24
     c3c:	79 f5       	brne	.+94     	; 0xc9c <SIM300CheckResponse+0x7c>
			
}

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
{
	len-=2;
     c3e:	24 2f       	mov	r18, r20
     c40:	22 50       	subi	r18, 0x02	; 2
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
	
	//Check trailing CR LF
	if(response[len]!=0x0D | response[len+1]!=0x0A)
     c42:	82 2f       	mov	r24, r18
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	df 01       	movw	r26, r30
     c48:	a8 0f       	add	r26, r24
     c4a:	b9 1f       	adc	r27, r25
     c4c:	31 e0       	ldi	r19, 0x01	; 1
     c4e:	5c 91       	ld	r21, X
     c50:	5d 30       	cpi	r21, 0x0D	; 13
     c52:	09 f4       	brne	.+2      	; 0xc56 <SIM300CheckResponse+0x36>
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	33 23       	and	r19, r19
     c58:	19 f5       	brne	.+70     	; 0xca0 <SIM300CheckResponse+0x80>
     c5a:	8e 0f       	add	r24, r30
     c5c:	9f 1f       	adc	r25, r31
     c5e:	31 e0       	ldi	r19, 0x01	; 1
     c60:	dc 01       	movw	r26, r24
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	8c 91       	ld	r24, X
     c66:	11 97       	sbiw	r26, 0x01	; 1
     c68:	8a 30       	cpi	r24, 0x0A	; 10
     c6a:	09 f4       	brne	.+2      	; 0xc6e <SIM300CheckResponse+0x4e>
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	33 23       	and	r19, r19
     c70:	b9 f4       	brne	.+46     	; 0xca0 <SIM300CheckResponse+0x80>
		return	SIM300_INVALID_RESPONSE;
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
     c72:	23 30       	cpi	r18, 0x03	; 3
     c74:	b8 f0       	brcs	.+46     	; 0xca4 <SIM300CheckResponse+0x84>
	{
		if(response[i]!=check[i-2])
     c76:	92 81       	ldd	r25, Z+2	; 0x02
     c78:	db 01       	movw	r26, r22
     c7a:	8c 91       	ld	r24, X
     c7c:	98 17       	cp	r25, r24
     c7e:	a1 f4       	brne	.+40     	; 0xca8 <SIM300CheckResponse+0x88>
	
	return SIM300_TIMEOUT;
			
}

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
     c80:	33 96       	adiw	r30, 0x03	; 3
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	45 50       	subi	r20, 0x05	; 5
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <SIM300CheckResponse+0x74>
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
	{
		if(response[i]!=check[i-2])
     c8a:	21 91       	ld	r18, Z+
     c8c:	9d 91       	ld	r25, X+
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	29 17       	cp	r18, r25
     c92:	61 f4       	brne	.+24     	; 0xcac <SIM300CheckResponse+0x8c>
	if(response[len]!=0x0D | response[len+1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
     c94:	84 17       	cp	r24, r20
     c96:	c9 f7       	brne	.-14     	; 0xc8a <SIM300CheckResponse+0x6a>
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
	}
	
	return SIM300_OK;		
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 95       	ret
{
	len-=2;
	
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	08 95       	ret
	
	//Check trailing CR LF
	if(response[len]!=0x0D | response[len+1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	08 95       	ret
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
	}
	
	return SIM300_OK;		
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	08 95       	ret
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
     ca8:	8e ef       	ldi	r24, 0xFE	; 254
     caa:	08 95       	ret
     cac:	8e ef       	ldi	r24, 0xFE	; 254
	}
	
	return SIM300_OK;		
}
     cae:	08 95       	ret

00000cb0 <SIM300Init>:

//A common buffer used to read response from SIM300
char sim300_buffer[128];

int8_t SIM300Init()
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
	//Init USART lib
	USARTInit(103);
     cb4:	87 e6       	ldi	r24, 0x67	; 103
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 67 09 	call	0x12ce	; 0x12ce <USARTInit>
	
	//Check communication line
	SIM300Cmd("AT");	//Test command
     cbc:	89 ec       	ldi	r24, 0xC9	; 201
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
     cc4:	ca e0       	ldi	r28, 0x0A	; 10
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
	//correct response is 6 byte long
	//So wait until we have got 6 bytes
	//in buffer.
	while(i<10)
	{
		if(UDataAvailable()<6)
     cc8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
     ccc:	86 30       	cpi	r24, 0x06	; 6
     cce:	50 f4       	brcc	.+20     	; 0xce4 <SIM300Init+0x34>
     cd0:	83 ec       	ldi	r24, 0xC3	; 195
     cd2:	99 e0       	ldi	r25, 0x09	; 9
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <SIM300Init+0x24>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <SIM300Init+0x2a>
     cda:	00 00       	nop
     cdc:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i=0;
	
	//correct response is 6 byte long
	//So wait until we have got 6 bytes
	//in buffer.
	while(i<10)
     cde:	a1 f7       	brne	.-24     	; 0xcc8 <SIM300Init+0x18>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
     ce0:	8d ef       	ldi	r24, 0xFD	; 253
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <SIM300Init+0x4e>
		}			
		else
		{
			//We got a response that is 6 bytes long
			//Now check it	
			UReadBuffer(sim300_buffer,6);	//Read serial Data
     ce4:	cf ea       	ldi	r28, 0xAF	; 175
     ce6:	d2 e0       	ldi	r29, 0x02	; 2
     ce8:	ce 01       	movw	r24, r28
     cea:	66 e0       	ldi	r22, 0x06	; 6
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	0e 94 24 0a 	call	0x1448	; 0x1448 <UReadBuffer>
			
			return SIM300CheckResponse(sim300_buffer,"OK",6);
     cf2:	ce 01       	movw	r24, r28
     cf4:	6c ec       	ldi	r22, 0xCC	; 204
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	46 e0       	ldi	r20, 0x06	; 6
     cfa:	0e 94 10 06 	call	0xc20	; 0xc20 <SIM300CheckResponse>
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
			
}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <SIM300WaitForResponse>:
	
	return SIM300_OK;		
}

int8_t SIM300WaitForResponse(uint16_t timeout)
{
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	7c 01       	movw	r14, r24
	uint8_t i=0;
	uint16_t n=0;
     d14:	00 e0       	ldi	r16, 0x00	; 0
     d16:	10 e0       	ldi	r17, 0x00	; 0
	return SIM300_OK;		
}

int8_t SIM300WaitForResponse(uint16_t timeout)
{
	uint8_t i=0;
     d18:	c0 e0       	ldi	r28, 0x00	; 0
	
		if(n==timeout)
			return 0;
		else
		{
			sim300_buffer[i]=UReadData();
     d1a:	0f 2e       	mov	r0, r31
     d1c:	ff ea       	ldi	r31, 0xAF	; 175
     d1e:	cf 2e       	mov	r12, r31
     d20:	f2 e0       	ldi	r31, 0x02	; 2
     d22:	df 2e       	mov	r13, r31
     d24:	f0 2d       	mov	r31, r0
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <SIM300WaitForResponse+0x34>
	uint8_t i=0;
	uint16_t n=0;
	
	while(1)
	{
		while (UDataAvailable()==0 && n<timeout){n++; _delay_ms(1);}
     d28:	0f 5f       	subi	r16, 0xFF	; 255
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	89 ef       	ldi	r24, 0xF9	; 249
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <SIM300WaitForResponse+0x2c>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <SIM300WaitForResponse+0x32>
     d36:	00 00       	nop
     d38:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
     d3c:	88 23       	and	r24, r24
     d3e:	19 f4       	brne	.+6      	; 0xd46 <SIM300WaitForResponse+0x42>
     d40:	0e 15       	cp	r16, r14
     d42:	1f 05       	cpc	r17, r15
     d44:	88 f3       	brcs	.-30     	; 0xd28 <SIM300WaitForResponse+0x24>
	
		if(n==timeout)
     d46:	0e 15       	cp	r16, r14
     d48:	1f 05       	cpc	r17, r15
     d4a:	89 f0       	breq	.+34     	; 0xd6e <SIM300WaitForResponse+0x6a>
			return 0;
		else
		{
			sim300_buffer[i]=UReadData();
     d4c:	0e 94 c9 09 	call	0x1392	; 0x1392 <UReadData>
     d50:	f6 01       	movw	r30, r12
     d52:	ec 0f       	add	r30, r28
     d54:	f1 1d       	adc	r31, r1
     d56:	80 83       	st	Z, r24
		
			if(sim300_buffer[i]==0x0D && i!=0)
     d58:	8d 30       	cpi	r24, 0x0D	; 13
     d5a:	39 f4       	brne	.+14     	; 0xd6a <SIM300WaitForResponse+0x66>
     d5c:	cc 23       	and	r28, r28
     d5e:	29 f0       	breq	.+10     	; 0xd6a <SIM300WaitForResponse+0x66>
			{
				UFlushBuffer();
     d60:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
				return i+1;
     d64:	8c 2f       	mov	r24, r28
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <SIM300WaitForResponse+0x6c>
			}				
			else
				i++;
     d6a:	cf 5f       	subi	r28, 0xFF	; 255
		}
	}	
     d6c:	e5 cf       	rjmp	.-54     	; 0xd38 <SIM300WaitForResponse+0x34>
	while(1)
	{
		while (UDataAvailable()==0 && n<timeout){n++; _delay_ms(1);}
	
		if(n==timeout)
			return 0;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
			}				
			else
				i++;
		}
	}	
}
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	08 95       	ret

00000d80 <SIM300GetNetStat>:

int8_t SIM300GetNetStat()
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
	//Send Command
	SIM300Cmd("AT+CREG?");
     d84:	8f ec       	ldi	r24, 0xCF	; 207
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
     d8c:	ca e0       	ldi	r28, 0x0A	; 10
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
	//correct response is 20 byte long
	//So wait until we have got 20 bytes
	//in buffer.
	while(i<10)
	{
		if(UDataAvailable()<20)
     d90:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
     d94:	84 31       	cpi	r24, 0x14	; 20
     d96:	50 f4       	brcc	.+20     	; 0xdac <SIM300GetNetStat+0x2c>
     d98:	83 ec       	ldi	r24, 0xC3	; 195
     d9a:	99 e0       	ldi	r25, 0x09	; 9
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <SIM300GetNetStat+0x1c>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <SIM300GetNetStat+0x22>
     da2:	00 00       	nop
     da4:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i=0;
	
	//correct response is 20 byte long
	//So wait until we have got 20 bytes
	//in buffer.
	while(i<10)
     da6:	a1 f7       	brne	.-24     	; 0xd90 <SIM300GetNetStat+0x10>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
     da8:	8d ef       	ldi	r24, 0xFD	; 253
     daa:	15 c0       	rjmp	.+42     	; 0xdd6 <SIM300GetNetStat+0x56>
		}
		else
		{
			//We got a response that is 20 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,20);	//Read serial Data
     dac:	8f ea       	ldi	r24, 0xAF	; 175
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	64 e1       	ldi	r22, 0x14	; 20
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	0e 94 24 0a 	call	0x1448	; 0x1448 <UReadBuffer>
			
			if(sim300_buffer[11]=='1')
     db8:	80 91 ba 02 	lds	r24, 0x02BA
     dbc:	81 33       	cpi	r24, 0x31	; 49
     dbe:	31 f0       	breq	.+12     	; 0xdcc <SIM300GetNetStat+0x4c>
				return SIM300_NW_REGISTERED_HOME;
			else if(sim300_buffer[11]=='2')
     dc0:	82 33       	cpi	r24, 0x32	; 50
     dc2:	31 f0       	breq	.+12     	; 0xdd0 <SIM300GetNetStat+0x50>
				return SIM300_NW_SEARCHING;
			else if(sim300_buffer[11]=='5')
     dc4:	85 33       	cpi	r24, 0x35	; 53
     dc6:	31 f4       	brne	.+12     	; 0xdd4 <SIM300GetNetStat+0x54>
				return SIM300_NW_REGISTED_ROAMING;
     dc8:	85 e0       	ldi	r24, 0x05	; 5
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <SIM300GetNetStat+0x56>
			//We got a response that is 20 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,20);	//Read serial Data
			
			if(sim300_buffer[11]=='1')
				return SIM300_NW_REGISTERED_HOME;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <SIM300GetNetStat+0x56>
			else if(sim300_buffer[11]=='2')
				return SIM300_NW_SEARCHING;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <SIM300GetNetStat+0x56>
			else if(sim300_buffer[11]=='5')
				return SIM300_NW_REGISTED_ROAMING;
			else
				return SIM300_NW_ERROR;			
     dd4:	83 e6       	ldi	r24, 0x63	; 99
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
	
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <SIM300IsSIMInserted>:

int8_t SIM300IsSIMInserted()
{
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
	UFlushBuffer();
     de0:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+CSMINS?");
     de4:	88 ed       	ldi	r24, 0xD8	; 216
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
     dec:	ce e1       	ldi	r28, 0x1E	; 30
     dee:	d0 e0       	ldi	r29, 0x00	; 0
	//correct response is 22 byte long
	//So wait until we have got 22 bytes
	//in buffer.
	while(i<30)
	{
		if(UDataAvailable()<22)
     df0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
     df4:	86 31       	cpi	r24, 0x16	; 22
     df6:	50 f4       	brcc	.+20     	; 0xe0c <SIM300IsSIMInserted+0x30>
     df8:	83 ec       	ldi	r24, 0xC3	; 195
     dfa:	99 e0       	ldi	r25, 0x09	; 9
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <SIM300IsSIMInserted+0x20>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <SIM300IsSIMInserted+0x26>
     e02:	00 00       	nop
     e04:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i=0;
	
	//correct response is 22 byte long
	//So wait until we have got 22 bytes
	//in buffer.
	while(i<30)
     e06:	a1 f7       	brne	.-24     	; 0xdf0 <SIM300IsSIMInserted+0x14>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
     e08:	8d ef       	ldi	r24, 0xFD	; 253
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <SIM300IsSIMInserted+0x48>
		}
		else
		{
			//We got a response that is 22 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,22);	//Read serial Data
     e0c:	8f ea       	ldi	r24, 0xAF	; 175
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	66 e1       	ldi	r22, 0x16	; 22
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	0e 94 24 0a 	call	0x1448	; 0x1448 <UReadBuffer>
			
			if(sim300_buffer[13]=='1')
				return SIM300_SIM_PRESENT;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 91 bc 02 	lds	r25, 0x02BC
     e1e:	91 33       	cpi	r25, 0x31	; 49
     e20:	09 f0       	breq	.+2      	; 0xe24 <SIM300IsSIMInserted+0x48>
     e22:	80 e0       	ldi	r24, 0x00	; 0
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <SIM300GetProviderName>:

uint8_t SIM300GetProviderName(char *name)
{
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	18 2f       	mov	r17, r24
     e34:	09 2f       	mov	r16, r25
	UFlushBuffer();
     e36:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+CSPN?");
     e3a:	83 ee       	ldi	r24, 0xE3	; 227
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     e42:	88 ee       	ldi	r24, 0xE8	; 232
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
     e4a:	88 23       	and	r24, r24
     e4c:	f1 f0       	breq	.+60     	; 0xe8a <SIM300GetProviderName+0x60>
		return SIM300_TIMEOUT;
	
	char *start,*end;
	start=strchr(sim300_buffer,'"');
     e4e:	8f ea       	ldi	r24, 0xAF	; 175
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	62 e2       	ldi	r22, 0x22	; 34
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <strchr>
	start++;
     e5a:	ec 01       	movw	r28, r24
     e5c:	21 96       	adiw	r28, 0x01	; 1
	end=strchr(start,'"');
     e5e:	ce 01       	movw	r24, r28
     e60:	62 e2       	ldi	r22, 0x22	; 34
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <strchr>
	
	*end='\0';
     e68:	fc 01       	movw	r30, r24
     e6a:	10 82       	st	Z, r1
	
	strcpy(name,start);
     e6c:	81 2f       	mov	r24, r17
     e6e:	90 2f       	mov	r25, r16
     e70:	be 01       	movw	r22, r28
     e72:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strcpy>
	
	return strlen(name);
     e76:	e1 2f       	mov	r30, r17
     e78:	f0 2f       	mov	r31, r16
     e7a:	df 01       	movw	r26, r30
     e7c:	0d 90       	ld	r0, X+
     e7e:	00 20       	and	r0, r0
     e80:	e9 f7       	brne	.-6      	; 0xe7c <SIM300GetProviderName+0x52>
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	8a 2f       	mov	r24, r26
     e86:	81 1b       	sub	r24, r17
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <SIM300GetProviderName+0x62>
	SIM300Cmd("AT+CSPN?");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     e8a:	8d ef       	ldi	r24, 0xFD	; 253
	*end='\0';
	
	strcpy(name,start);
	
	return strlen(name);
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <SIM300GetIMEI>:

int8_t SIM300GetIMEI(char *emei)
{
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
	UFlushBuffer();
     e9c:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GSN");
     ea0:	8c ee       	ldi	r24, 0xEC	; 236
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     ea8:	88 ee       	ldi	r24, 0xE8	; 232
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
     eb0:	88 23       	and	r24, r24
     eb2:	71 f0       	breq	.+28     	; 0xed0 <SIM300GetIMEI+0x3a>
		return SIM300_TIMEOUT;
		
	sim300_buffer[len-1]='\0';
     eb4:	6f ea       	ldi	r22, 0xAF	; 175
     eb6:	72 e0       	ldi	r23, 0x02	; 2
     eb8:	fb 01       	movw	r30, r22
     eba:	e8 0f       	add	r30, r24
     ebc:	f1 1d       	adc	r31, r1
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	10 82       	st	Z, r1
	
	strcpy(emei,sim300_buffer+2);
     ec2:	6e 5f       	subi	r22, 0xFE	; 254
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	ce 01       	movw	r24, r28
     ec8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strcpy>
	
	return SIM300_OK;	
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <SIM300GetIMEI+0x3c>
	SIM300Cmd("AT+GSN");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     ed0:	8d ef       	ldi	r24, 0xFD	; 253
	sim300_buffer[len-1]='\0';
	
	strcpy(emei,sim300_buffer+2);
	
	return SIM300_OK;	
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <SIM300GetManufacturer>:

int8_t SIM300GetManufacturer(char *man_id)
{
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
	UFlushBuffer();
     ede:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GMI");
     ee2:	83 ef       	ldi	r24, 0xF3	; 243
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     eea:	88 ee       	ldi	r24, 0xE8	; 232
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
     ef2:	88 23       	and	r24, r24
     ef4:	71 f0       	breq	.+28     	; 0xf12 <SIM300GetManufacturer+0x3a>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     ef6:	6f ea       	ldi	r22, 0xAF	; 175
     ef8:	72 e0       	ldi	r23, 0x02	; 2
     efa:	fb 01       	movw	r30, r22
     efc:	e8 0f       	add	r30, r24
     efe:	f1 1d       	adc	r31, r1
     f00:	31 97       	sbiw	r30, 0x01	; 1
     f02:	10 82       	st	Z, r1
	
	strcpy(man_id,sim300_buffer+2);//+2 for removing leading CR LF
     f04:	6e 5f       	subi	r22, 0xFE	; 254
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strcpy>
	
	return SIM300_OK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <SIM300GetManufacturer+0x3c>
	SIM300Cmd("AT+GMI");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     f12:	8d ef       	ldi	r24, 0xFD	; 253
	sim300_buffer[len-1]='\0';
	
	strcpy(man_id,sim300_buffer+2);//+2 for removing leading CR LF
	
	return SIM300_OK;
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <SIM300GetModel>:

int8_t	SIM300GetModel(char *model)
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
	UFlushBuffer();
     f20:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GMM");
     f24:	8a ef       	ldi	r24, 0xFA	; 250
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     f2c:	88 ee       	ldi	r24, 0xE8	; 232
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
     f34:	88 23       	and	r24, r24
     f36:	71 f0       	breq	.+28     	; 0xf54 <SIM300GetModel+0x3a>
	return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     f38:	6f ea       	ldi	r22, 0xAF	; 175
     f3a:	72 e0       	ldi	r23, 0x02	; 2
     f3c:	fb 01       	movw	r30, r22
     f3e:	e8 0f       	add	r30, r24
     f40:	f1 1d       	adc	r31, r1
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	10 82       	st	Z, r1
	
	strcpy(model,sim300_buffer+2);//+2 for removing leading CR LF
     f46:	6e 5f       	subi	r22, 0xFE	; 254
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strcpy>
	
	return SIM300_OK;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <SIM300GetModel+0x3c>
	SIM300Cmd("AT+GMM");
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
	return SIM300_TIMEOUT;
     f54:	8d ef       	ldi	r24, 0xFD	; 253
	sim300_buffer[len-1]='\0';
	
	strcpy(model,sim300_buffer+2);//+2 for removing leading CR LF
	
	return SIM300_OK;
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <SIM300DeleteMsg>:
int8_t	SIM300DeleteMsg(uint8_t i)
{
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	60 97       	sbiw	r28, 0x10	; 16
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	f8 2e       	mov	r15, r24
	UFlushBuffer();
     f78:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//String for storing the command to be sent
	char cmd[16];
	
	//Build command string
	sprintf(cmd,"AT+CMGD=%d",i);
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <SIM300DeleteMsg+0x22>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <SIM300DeleteMsg+0x24>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <SIM300DeleteMsg+0x26>
     f82:	ed b7       	in	r30, 0x3d	; 61
     f84:	fe b7       	in	r31, 0x3e	; 62
     f86:	31 96       	adiw	r30, 0x01	; 1
     f88:	8e 01       	movw	r16, r28
     f8a:	0f 5f       	subi	r16, 0xFF	; 255
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	ad b7       	in	r26, 0x3d	; 61
     f90:	be b7       	in	r27, 0x3e	; 62
     f92:	12 96       	adiw	r26, 0x02	; 2
     f94:	1c 93       	st	X, r17
     f96:	0e 93       	st	-X, r16
     f98:	11 97       	sbiw	r26, 0x01	; 1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	93 83       	std	Z+3, r25	; 0x03
     fa0:	82 83       	std	Z+2, r24	; 0x02
     fa2:	f4 82       	std	Z+4, r15	; 0x04
     fa4:	15 82       	std	Z+5, r1	; 0x05
     fa6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <sprintf>
	
	//Send Command
	SIM300Cmd(cmd);
     faa:	8d b7       	in	r24, 0x3d	; 61
     fac:	9e b7       	in	r25, 0x3e	; 62
     fae:	06 96       	adiw	r24, 0x06	; 6
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	9e bf       	out	0x3e, r25	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	8d bf       	out	0x3d, r24	; 61
     fba:	c8 01       	movw	r24, r16
     fbc:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
     fc0:	88 ee       	ldi	r24, 0xE8	; 232
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
     fc8:	88 23       	and	r24, r24
     fca:	89 f0       	breq	.+34     	; 0xfee <SIM300DeleteMsg+0x92>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
     fcc:	2f ea       	ldi	r18, 0xAF	; 175
     fce:	32 e0       	ldi	r19, 0x02	; 2
     fd0:	f9 01       	movw	r30, r18
     fd2:	e8 0f       	add	r30, r24
     fd4:	f1 1d       	adc	r31, r1
     fd6:	31 97       	sbiw	r30, 0x01	; 1
     fd8:	10 82       	st	Z, r1
	
	//Check if the response is OK
	if(strcasecmp(sim300_buffer+2,"OK")==0)
     fda:	c9 01       	movw	r24, r18
     fdc:	02 96       	adiw	r24, 0x02	; 2
     fde:	6c ec       	ldi	r22, 0xCC	; 204
     fe0:	71 e0       	ldi	r23, 0x01	; 1
     fe2:	0e 94 33 0c 	call	0x1866	; 0x1866 <strcasecmp>
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	21 f4       	brne	.+8      	; 0xff2 <SIM300DeleteMsg+0x96>
		return SIM300_OK;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <SIM300DeleteMsg+0x98>
	SIM300Cmd(cmd);
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
     fee:	8d ef       	ldi	r24, 0xFD	; 253
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <SIM300DeleteMsg+0x98>
	
	//Check if the response is OK
	if(strcasecmp(sim300_buffer+2,"OK")==0)
		return SIM300_OK;
	else
		return SIM300_FAIL;
     ff2:	8e ef       	ldi	r24, 0xFE	; 254
}
     ff4:	60 96       	adiw	r28, 0x10	; 16
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	08 95       	ret

0000100c <SIM300WaitForMsg>:

int8_t	SIM300WaitForMsg(uint8_t *id)
{	
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	00 d0       	rcall	.+0      	; 0x1016 <SIM300WaitForMsg+0xa>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <SIM300WaitForMsg+0xc>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	8c 01       	movw	r16, r24
	uint8_t len=SIM300WaitForResponse(250);
    101e:	8a ef       	ldi	r24, 0xFA	; 250
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
    1026:	88 23       	and	r24, r24
    1028:	31 f1       	breq	.+76     	; 0x1076 <SIM300WaitForMsg+0x6a>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
    102a:	2f ea       	ldi	r18, 0xAF	; 175
    102c:	32 e0       	ldi	r19, 0x02	; 2
    102e:	f9 01       	movw	r30, r18
    1030:	e8 0f       	add	r30, r24
    1032:	f1 1d       	adc	r31, r1
    1034:	31 97       	sbiw	r30, 0x01	; 1
    1036:	10 82       	st	Z, r1
	
	if(strncasecmp(sim300_buffer+2,"+CMTI:",6)==0)
    1038:	c9 01       	movw	r24, r18
    103a:	02 96       	adiw	r24, 0x02	; 2
    103c:	6c e0       	ldi	r22, 0x0C	; 12
    103e:	72 e0       	ldi	r23, 0x02	; 2
    1040:	46 e0       	ldi	r20, 0x06	; 6
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <strncasecmp>
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	b9 f4       	brne	.+46     	; 0x107a <SIM300WaitForMsg+0x6e>
	{
		char str_id[4];
		
		char *start;
		
		start=strchr(sim300_buffer,',');
    104c:	8f ea       	ldi	r24, 0xAF	; 175
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	6c e2       	ldi	r22, 0x2C	; 44
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <strchr>
		start++;
    1058:	bc 01       	movw	r22, r24
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
	
		strcpy(str_id,start);
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strcpy>
		
		*id=atoi(str_id);
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	0e 94 15 0c 	call	0x182a	; 0x182a <atoi>
    106e:	f8 01       	movw	r30, r16
    1070:	80 83       	st	Z, r24
		
		return SIM300_OK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	03 c0       	rjmp	.+6      	; 0x107c <SIM300WaitForMsg+0x70>
int8_t	SIM300WaitForMsg(uint8_t *id)
{	
	uint8_t len=SIM300WaitForResponse(250);
	
	if(len==0)
		return SIM300_TIMEOUT;
    1076:	8d ef       	ldi	r24, 0xFD	; 253
    1078:	01 c0       	rjmp	.+2      	; 0x107c <SIM300WaitForMsg+0x70>
		*id=atoi(str_id);
		
		return SIM300_OK;
	}		
	else
		return SIM300_FAIL;
    107a:	8e ef       	ldi	r24, 0xFE	; 254
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret

0000108e <SIM300ReadMsg>:
int8_t	SIM300ReadMsg(uint8_t i, char *msg)
{
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	60 97       	sbiw	r28, 0x10	; 16
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	f8 2e       	mov	r15, r24
    10ae:	6b 01       	movw	r12, r22
	//Clear pending data in queue
	UFlushBuffer();
    10b0:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	//String for storing the command to be sent
	char cmd[16];
	
	//Build command string
	sprintf(cmd,"AT+CMGR=%d",i);
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <SIM300ReadMsg+0x28>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <SIM300ReadMsg+0x2a>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <SIM300ReadMsg+0x2c>
    10ba:	ed b7       	in	r30, 0x3d	; 61
    10bc:	fe b7       	in	r31, 0x3e	; 62
    10be:	31 96       	adiw	r30, 0x01	; 1
    10c0:	8e 01       	movw	r16, r28
    10c2:	0f 5f       	subi	r16, 0xFF	; 255
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	ad b7       	in	r26, 0x3d	; 61
    10c8:	be b7       	in	r27, 0x3e	; 62
    10ca:	12 96       	adiw	r26, 0x02	; 2
    10cc:	1c 93       	st	X, r17
    10ce:	0e 93       	st	-X, r16
    10d0:	11 97       	sbiw	r26, 0x01	; 1
    10d2:	83 e1       	ldi	r24, 0x13	; 19
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	93 83       	std	Z+3, r25	; 0x03
    10d8:	82 83       	std	Z+2, r24	; 0x02
    10da:	f4 82       	std	Z+4, r15	; 0x04
    10dc:	15 82       	std	Z+5, r1	; 0x05
    10de:	0e 94 a4 0c 	call	0x1948	; 0x1948 <sprintf>
	
	//Send Command
	SIM300Cmd(cmd);
    10e2:	8d b7       	in	r24, 0x3d	; 61
    10e4:	9e b7       	in	r25, 0x3e	; 62
    10e6:	06 96       	adiw	r24, 0x06	; 6
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	9e bf       	out	0x3e, r25	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	8d bf       	out	0x3d, r24	; 61
    10f2:	c8 01       	movw	r24, r16
    10f4:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
    10f8:	88 ee       	ldi	r24, 0xE8	; 232
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
    1100:	88 23       	and	r24, r24
    1102:	59 f1       	breq	.+86     	; 0x115a <SIM300ReadMsg+0xcc>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
    1104:	2f ea       	ldi	r18, 0xAF	; 175
    1106:	32 e0       	ldi	r19, 0x02	; 2
    1108:	f9 01       	movw	r30, r18
    110a:	e8 0f       	add	r30, r24
    110c:	f1 1d       	adc	r31, r1
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	10 82       	st	Z, r1
	
	//Check of SIM NOT Ready error
	if(strcasecmp(sim300_buffer+2,"+CMS ERROR: 517")==0)
    1112:	c9 01       	movw	r24, r18
    1114:	02 96       	adiw	r24, 0x02	; 2
    1116:	6e e1       	ldi	r22, 0x1E	; 30
    1118:	72 e0       	ldi	r23, 0x02	; 2
    111a:	0e 94 33 0c 	call	0x1866	; 0x1866 <strcasecmp>
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	f1 f0       	breq	.+60     	; 0x115e <SIM300ReadMsg+0xd0>
		//SIM NOT Ready
		return SIM300_SIM_NOT_READY;
	}
	
	//MSG Slot Empty
	if(strcasecmp(sim300_buffer+2,"OK")==0)
    1122:	81 eb       	ldi	r24, 0xB1	; 177
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	6c ec       	ldi	r22, 0xCC	; 204
    1128:	71 e0       	ldi	r23, 0x01	; 1
    112a:	0e 94 33 0c 	call	0x1866	; 0x1866 <strcasecmp>
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	c1 f0       	breq	.+48     	; 0x1162 <SIM300ReadMsg+0xd4>
	{
		return SIM300_MSG_EMPTY;
	}
		
	//Now read the actual msg text
	len=SIM300WaitForResponse(1000);
    1132:	88 ee       	ldi	r24, 0xE8	; 232
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
    113a:	88 23       	and	r24, r24
    113c:	a1 f0       	breq	.+40     	; 0x1166 <SIM300ReadMsg+0xd8>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
    113e:	6f ea       	ldi	r22, 0xAF	; 175
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	fb 01       	movw	r30, r22
    1144:	e8 0f       	add	r30, r24
    1146:	f1 1d       	adc	r31, r1
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	10 82       	st	Z, r1
	strcpy(msg,sim300_buffer+1);//+1 for removing trailing LF of prev line
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	c6 01       	movw	r24, r12
    1152:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strcpy>
	
	return SIM300_OK;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	07 c0       	rjmp	.+14     	; 0x1168 <SIM300ReadMsg+0xda>
	SIM300Cmd(cmd);
	
	uint8_t len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
    115a:	8d ef       	ldi	r24, 0xFD	; 253
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <SIM300ReadMsg+0xda>
	
	//Check of SIM NOT Ready error
	if(strcasecmp(sim300_buffer+2,"+CMS ERROR: 517")==0)
	{
		//SIM NOT Ready
		return SIM300_SIM_NOT_READY;
    115e:	84 e6       	ldi	r24, 0x64	; 100
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <SIM300ReadMsg+0xda>
	}
	
	//MSG Slot Empty
	if(strcasecmp(sim300_buffer+2,"OK")==0)
	{
		return SIM300_MSG_EMPTY;
    1162:	85 e6       	ldi	r24, 0x65	; 101
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <SIM300ReadMsg+0xda>
		
	//Now read the actual msg text
	len=SIM300WaitForResponse(1000);
	
	if(len==0)
		return SIM300_TIMEOUT;
    1166:	8d ef       	ldi	r24, 0xFD	; 253
	
	sim300_buffer[len-1]='\0';
	strcpy(msg,sim300_buffer+1);//+1 for removing trailing LF of prev line
	
	return SIM300_OK;
}
    1168:	60 96       	adiw	r28, 0x10	; 16
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	08 95       	ret

00001184 <SIM300SendMsg>:

int8_t	SIM300SendMsg(const char *num, const char *msg,uint8_t *msg_ref)
{
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	69 97       	sbiw	r28, 0x19	; 25
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	6c 01       	movw	r12, r24
    11aa:	16 2f       	mov	r17, r22
    11ac:	07 2f       	mov	r16, r23
    11ae:	5a 01       	movw	r10, r20
	UFlushBuffer();
    11b0:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
	
	char cmd[25];
	
	sprintf(cmd,"AT+CMGS= %s",num);
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <SIM300SendMsg+0x32>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <SIM300SendMsg+0x34>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <SIM300SendMsg+0x36>
    11ba:	ed b7       	in	r30, 0x3d	; 61
    11bc:	fe b7       	in	r31, 0x3e	; 62
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	7e 01       	movw	r14, r28
    11c2:	08 94       	sec
    11c4:	e1 1c       	adc	r14, r1
    11c6:	f1 1c       	adc	r15, r1
    11c8:	ad b7       	in	r26, 0x3d	; 61
    11ca:	be b7       	in	r27, 0x3e	; 62
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	fc 92       	st	X, r15
    11d0:	ee 92       	st	-X, r14
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	8e e2       	ldi	r24, 0x2E	; 46
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	93 83       	std	Z+3, r25	; 0x03
    11da:	82 83       	std	Z+2, r24	; 0x02
    11dc:	d5 82       	std	Z+5, r13	; 0x05
    11de:	c4 82       	std	Z+4, r12	; 0x04
    11e0:	0e 94 a4 0c 	call	0x1948	; 0x1948 <sprintf>
	
	cmd[8]=0x22; //"
    11e4:	22 e2       	ldi	r18, 0x22	; 34
    11e6:	29 87       	std	Y+9, r18	; 0x09
	
	uint8_t n=strlen(cmd);
    11e8:	f7 01       	movw	r30, r14
    11ea:	01 90       	ld	r0, Z+
    11ec:	00 20       	and	r0, r0
    11ee:	e9 f7       	brne	.-6      	; 0x11ea <SIM300SendMsg+0x66>
    11f0:	31 97       	sbiw	r30, 0x01	; 1
	
	cmd[n]=0x22; //"
    11f2:	ee 19       	sub	r30, r14
    11f4:	8e 2f       	mov	r24, r30
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	f7 01       	movw	r30, r14
    11fa:	e8 0f       	add	r30, r24
    11fc:	f9 1f       	adc	r31, r25
    11fe:	20 83       	st	Z, r18
	cmd[n+1]='\0';
    1200:	8c 0f       	add	r24, r28
    1202:	9d 1f       	adc	r25, r29
    1204:	fc 01       	movw	r30, r24
    1206:	12 82       	std	Z+2, r1	; 0x02
	
	//Send Command
	SIM300Cmd(cmd);
    1208:	8d b7       	in	r24, 0x3d	; 61
    120a:	9e b7       	in	r25, 0x3e	; 62
    120c:	06 96       	adiw	r24, 0x06	; 6
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	9e bf       	out	0x3e, r25	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	8d bf       	out	0x3d, r24	; 61
    1218:	c7 01       	movw	r24, r14
    121a:	0e 94 cb 05 	call	0xb96	; 0xb96 <SIM300Cmd>
    121e:	a7 ea       	ldi	r26, 0xA7	; 167
    1220:	b1 e6       	ldi	r27, 0x61	; 97
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <SIM300SendMsg+0x9e>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <SIM300SendMsg+0xa4>
    1228:	00 00       	nop
	
	_delay_ms(100);
	
	UWriteString(msg);
    122a:	81 2f       	mov	r24, r17
    122c:	90 2f       	mov	r25, r16
    122e:	0e 94 15 0a 	call	0x142a	; 0x142a <UWriteString>
	
	UWriteData(0x1A);
    1232:	8a e1       	ldi	r24, 0x1A	; 26
    1234:	0e 94 ef 09 	call	0x13de	; 0x13de <UWriteData>
	
	while(   UDataAvailable()<(strlen(msg)+5)   );
    1238:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
    123c:	e1 2f       	mov	r30, r17
    123e:	f0 2f       	mov	r31, r16
    1240:	df 01       	movw	r26, r30
    1242:	0d 90       	ld	r0, X+
    1244:	00 20       	and	r0, r0
    1246:	e9 f7       	brne	.-6      	; 0x1242 <SIM300SendMsg+0xbe>
    1248:	ae 1b       	sub	r26, r30
    124a:	bf 0b       	sbc	r27, r31
    124c:	14 96       	adiw	r26, 0x04	; 4
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	8a 17       	cp	r24, r26
    1252:	9b 07       	cpc	r25, r27
    1254:	88 f3       	brcs	.-30     	; 0x1238 <SIM300SendMsg+0xb4>
	
	//Remove Echo
	UReadBuffer(sim300_buffer,strlen(msg)+5);
    1256:	8f ea       	ldi	r24, 0xAF	; 175
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	bd 01       	movw	r22, r26
    125c:	0e 94 24 0a 	call	0x1448	; 0x1448 <UReadBuffer>
	
	uint8_t len=SIM300WaitForResponse(6000);
    1260:	80 e7       	ldi	r24, 0x70	; 112
    1262:	97 e1       	ldi	r25, 0x17	; 23
    1264:	0e 94 82 06 	call	0xd04	; 0xd04 <SIM300WaitForResponse>
	
	if(len==0)
    1268:	88 23       	and	r24, r24
    126a:	f9 f0       	breq	.+62     	; 0x12aa <SIM300SendMsg+0x126>
		return SIM300_TIMEOUT;
	
	sim300_buffer[len-1]='\0';
    126c:	2f ea       	ldi	r18, 0xAF	; 175
    126e:	32 e0       	ldi	r19, 0x02	; 2
    1270:	f9 01       	movw	r30, r18
    1272:	e8 0f       	add	r30, r24
    1274:	f1 1d       	adc	r31, r1
    1276:	31 97       	sbiw	r30, 0x01	; 1
    1278:	10 82       	st	Z, r1
	
	if(strncasecmp(sim300_buffer+2,"CMGS:",5)==0)
    127a:	c9 01       	movw	r24, r18
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	6a e3       	ldi	r22, 0x3A	; 58
    1280:	72 e0       	ldi	r23, 0x02	; 2
    1282:	45 e0       	ldi	r20, 0x05	; 5
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <strncasecmp>
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	51 f4       	brne	.+20     	; 0x12a2 <SIM300SendMsg+0x11e>
	{
		
		*msg_ref=atoi(sim300_buffer+8);
    128e:	87 eb       	ldi	r24, 0xB7	; 183
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	0e 94 15 0c 	call	0x182a	; 0x182a <atoi>
    1296:	f5 01       	movw	r30, r10
    1298:	80 83       	st	Z, r24
		
		UFlushBuffer();
    129a:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
		
		return SIM300_OK;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <SIM300SendMsg+0x128>
	}
	else
	{
		UFlushBuffer();
    12a2:	0e 94 42 0a 	call	0x1484	; 0x1484 <UFlushBuffer>
		return SIM300_FAIL;	
    12a6:	8e ef       	ldi	r24, 0xFE	; 254
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <SIM300SendMsg+0x128>
	UReadBuffer(sim300_buffer,strlen(msg)+5);
	
	uint8_t len=SIM300WaitForResponse(6000);
	
	if(len==0)
		return SIM300_TIMEOUT;
    12aa:	8d ef       	ldi	r24, 0xFD	; 253
	else
	{
		UFlushBuffer();
		return SIM300_FAIL;	
	}		
}
    12ac:	69 96       	adiw	r28, 0x19	; 25
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	08 95       	ret

000012ce <USARTInit>:
#include "usart.h"

void USARTInit(uint16_t ubrrvalue)
{
	//Setup q
	UQFront=UQEnd=-1;
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	20 93 6e 02 	sts	0x026E, r18
    12d4:	20 93 6d 02 	sts	0x026D, r18

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
    12d8:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrrvalue;
    12da:	89 b9       	out	0x09, r24	; 9
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
    12dc:	86 e8       	ldi	r24, 0x86	; 134
    12de:	80 bd       	out	0x20, r24	; 32

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    12e0:	88 e9       	ldi	r24, 0x98	; 152
    12e2:	8a b9       	out	0x0a, r24	; 10
	sei();
    12e4:	78 94       	sei

}
    12e6:	08 95       	ret

000012e8 <__vector_13>:

//The USART ISR
ISR(USART_RXC_VECT)
{
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
	//Read the data
	char data=UDR;
    1300:	4c b1       	in	r20, 0x0c	; 12

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
    1302:	80 91 6e 02 	lds	r24, 0x026E
    1306:	8f 33       	cpi	r24, 0x3F	; 63
    1308:	21 f4       	brne	.+8      	; 0x1312 <__vector_13+0x2a>
    130a:	80 91 6d 02 	lds	r24, 0x026D
    130e:	88 23       	and	r24, r24
    1310:	79 f0       	breq	.+30     	; 0x1330 <__vector_13+0x48>
    1312:	20 91 6e 02 	lds	r18, 0x026E
    1316:	80 91 6d 02 	lds	r24, 0x026D
    131a:	33 27       	eor	r19, r19
    131c:	27 fd       	sbrc	r18, 7
    131e:	30 95       	com	r19
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	99 27       	eor	r25, r25
    1326:	87 fd       	sbrc	r24, 7
    1328:	90 95       	com	r25
    132a:	28 17       	cp	r18, r24
    132c:	39 07       	cpc	r19, r25
    132e:	59 f4       	brne	.+22     	; 0x1346 <__vector_13+0x5e>
	{
		//Q Full
		UQFront++;
    1330:	80 91 6d 02 	lds	r24, 0x026D
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 6d 02 	sts	0x026D, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
    133a:	80 91 6d 02 	lds	r24, 0x026D
    133e:	80 34       	cpi	r24, 0x40	; 64
    1340:	11 f4       	brne	.+4      	; 0x1346 <__vector_13+0x5e>
    1342:	10 92 6d 02 	sts	0x026D, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
    1346:	80 91 6e 02 	lds	r24, 0x026E
    134a:	8f 33       	cpi	r24, 0x3F	; 63
    134c:	19 f4       	brne	.+6      	; 0x1354 <__vector_13+0x6c>
		UQEnd=0;
    134e:	10 92 6e 02 	sts	0x026E, r1
    1352:	05 c0       	rjmp	.+10     	; 0x135e <__vector_13+0x76>
	else
		UQEnd++;
    1354:	80 91 6e 02 	lds	r24, 0x026E
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	80 93 6e 02 	sts	0x026E, r24


	URBuff[UQEnd]=data;
    135e:	e0 91 6e 02 	lds	r30, 0x026E
    1362:	ff 27       	eor	r31, r31
    1364:	e7 fd       	sbrc	r30, 7
    1366:	f0 95       	com	r31
    1368:	e1 59       	subi	r30, 0x91	; 145
    136a:	fd 4f       	sbci	r31, 0xFD	; 253
    136c:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
    136e:	80 91 6d 02 	lds	r24, 0x026D
    1372:	8f 3f       	cpi	r24, 0xFF	; 255
    1374:	11 f4       	brne	.+4      	; 0x137a <__vector_13+0x92>
    1376:	10 92 6d 02 	sts	0x026D, r1

}
    137a:	ff 91       	pop	r31
    137c:	ef 91       	pop	r30
    137e:	9f 91       	pop	r25
    1380:	8f 91       	pop	r24
    1382:	4f 91       	pop	r20
    1384:	3f 91       	pop	r19
    1386:	2f 91       	pop	r18
    1388:	0f 90       	pop	r0
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	0f 90       	pop	r0
    138e:	1f 90       	pop	r1
    1390:	18 95       	reti

00001392 <UReadData>:
char UReadData()
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
    1392:	80 91 6d 02 	lds	r24, 0x026D
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	01 f1       	breq	.+64     	; 0x13da <UReadData+0x48>
		return 0;
	
	data=URBuff[UQFront];
    139a:	e0 91 6d 02 	lds	r30, 0x026D
    139e:	ff 27       	eor	r31, r31
    13a0:	e7 fd       	sbrc	r30, 7
    13a2:	f0 95       	com	r31
    13a4:	e1 59       	subi	r30, 0x91	; 145
    13a6:	fd 4f       	sbci	r31, 0xFD	; 253
    13a8:	80 81       	ld	r24, Z
	
	if(UQFront==UQEnd)
    13aa:	20 91 6d 02 	lds	r18, 0x026D
    13ae:	90 91 6e 02 	lds	r25, 0x026E
    13b2:	29 17       	cp	r18, r25
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <UReadData+0x30>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
    13b6:	9f ef       	ldi	r25, 0xFF	; 255
    13b8:	90 93 6e 02 	sts	0x026E, r25
    13bc:	90 93 6d 02 	sts	0x026D, r25
    13c0:	08 95       	ret
	}
	else
	{
		UQFront++;
    13c2:	90 91 6d 02 	lds	r25, 0x026D
    13c6:	9f 5f       	subi	r25, 0xFF	; 255
    13c8:	90 93 6d 02 	sts	0x026D, r25

		if(UQFront==RECEIVE_BUFF_SIZE)
    13cc:	90 91 6d 02 	lds	r25, 0x026D
    13d0:	90 34       	cpi	r25, 0x40	; 64
    13d2:	21 f4       	brne	.+8      	; 0x13dc <UReadData+0x4a>
		UQFront=0;
    13d4:	10 92 6d 02 	sts	0x026D, r1
    13d8:	08 95       	ret
{
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
		return 0;
    13da:	80 e0       	ldi	r24, 0x00	; 0
		if(UQFront==RECEIVE_BUFF_SIZE)
		UQFront=0;
	}

	return data;
}
    13dc:	08 95       	ret

000013de <UWriteData>:

void UWriteData(char data)
{
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
    13de:	5d 9b       	sbis	0x0b, 5	; 11
    13e0:	fe cf       	rjmp	.-4      	; 0x13de <UWriteData>

	//Now write
	UDR=data;
    13e2:	8c b9       	out	0x0c, r24	; 12
}
    13e4:	08 95       	ret

000013e6 <UDataAvailable>:

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
    13e6:	80 91 6d 02 	lds	r24, 0x026D
    13ea:	8f 3f       	cpi	r24, 0xFF	; 255
    13ec:	d1 f0       	breq	.+52     	; 0x1422 <UDataAvailable+0x3c>
	if(UQFront<UQEnd)
    13ee:	90 91 6d 02 	lds	r25, 0x026D
    13f2:	80 91 6e 02 	lds	r24, 0x026E
    13f6:	98 17       	cp	r25, r24
    13f8:	3c f4       	brge	.+14     	; 0x1408 <UDataAvailable+0x22>
		return(UQEnd-UQFront+1);
    13fa:	80 91 6e 02 	lds	r24, 0x026E
    13fe:	90 91 6d 02 	lds	r25, 0x026D
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	89 1b       	sub	r24, r25
    1406:	08 95       	ret
	else if(UQFront>UQEnd)
    1408:	90 91 6d 02 	lds	r25, 0x026D
    140c:	80 91 6e 02 	lds	r24, 0x026E
    1410:	89 17       	cp	r24, r25
    1412:	4c f4       	brge	.+18     	; 0x1426 <UDataAvailable+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
    1414:	80 91 6e 02 	lds	r24, 0x026E
    1418:	90 91 6d 02 	lds	r25, 0x026D
    141c:	8f 5b       	subi	r24, 0xBF	; 191
    141e:	89 1b       	sub	r24, r25
    1420:	08 95       	ret
	UDR=data;
}

uint8_t UDataAvailable()
{
	if(UQFront==-1) return 0;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret
	if(UQFront<UQEnd)
		return(UQEnd-UQFront+1);
	else if(UQFront>UQEnd)
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
}
    1428:	08 95       	ret

0000142a <UWriteString>:

void UWriteString(char *str)
{
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ec 01       	movw	r28, r24
	while((*str)!='\0')
    1430:	88 81       	ld	r24, Y
    1432:	88 23       	and	r24, r24
    1434:	31 f0       	breq	.+12     	; 0x1442 <UWriteString+0x18>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
	else
		return 1;
}

void UWriteString(char *str)
    1436:	21 96       	adiw	r28, 0x01	; 1
{
	while((*str)!='\0')
	{
		UWriteData(*str);
    1438:	0e 94 ef 09 	call	0x13de	; 0x13de <UWriteData>
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
    143c:	89 91       	ld	r24, Y+
    143e:	88 23       	and	r24, r24
    1440:	d9 f7       	brne	.-10     	; 0x1438 <UWriteString+0xe>
	{
		UWriteData(*str);
		str++;
	}
}
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <UReadBuffer>:

void UReadBuffer(void *buff,uint16_t len)
{
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	eb 01       	movw	r28, r22
	uint16_t i;
	for(i=0;i<len;i++)
    1456:	20 97       	sbiw	r28, 0x00	; 0
    1458:	71 f0       	breq	.+28     	; 0x1476 <UReadBuffer+0x2e>
    145a:	e8 2e       	mov	r14, r24
    145c:	f9 2e       	mov	r15, r25
    145e:	00 e0       	ldi	r16, 0x00	; 0
    1460:	10 e0       	ldi	r17, 0x00	; 0
	{
		((char*)buff)[i]=UReadData();
    1462:	0e 94 c9 09 	call	0x1392	; 0x1392 <UReadData>
    1466:	f7 01       	movw	r30, r14
    1468:	81 93       	st	Z+, r24
    146a:	7f 01       	movw	r14, r30
}

void UReadBuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
    146c:	0f 5f       	subi	r16, 0xFF	; 255
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	0c 17       	cp	r16, r28
    1472:	1d 07       	cpc	r17, r29
    1474:	b1 f7       	brne	.-20     	; 0x1462 <UReadBuffer+0x1a>
	{
		((char*)buff)[i]=UReadData();
	}
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <UFlushBuffer>:
void UFlushBuffer()
{
	while(UDataAvailable()>0)
    1484:	02 c0       	rjmp	.+4      	; 0x148a <UFlushBuffer+0x6>
	{
		UReadData();
    1486:	0e 94 c9 09 	call	0x1392	; 0x1392 <UReadData>
		((char*)buff)[i]=UReadData();
	}
}
void UFlushBuffer()
{
	while(UDataAvailable()>0)
    148a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UDataAvailable>
    148e:	88 23       	and	r24, r24
    1490:	d1 f7       	brne	.-12     	; 0x1486 <UFlushBuffer+0x2>
	{
		UReadData();
	}
}
    1492:	08 95       	ret

00001494 <__subsf3>:
    1494:	50 58       	subi	r21, 0x80	; 128

00001496 <__addsf3>:
    1496:	bb 27       	eor	r27, r27
    1498:	aa 27       	eor	r26, r26
    149a:	0e d0       	rcall	.+28     	; 0x14b8 <__addsf3x>
    149c:	dc c0       	rjmp	.+440    	; 0x1656 <__fp_round>
    149e:	cd d0       	rcall	.+410    	; 0x163a <__fp_pscA>
    14a0:	30 f0       	brcs	.+12     	; 0x14ae <__addsf3+0x18>
    14a2:	d2 d0       	rcall	.+420    	; 0x1648 <__fp_pscB>
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <__addsf3+0x18>
    14a6:	31 f4       	brne	.+12     	; 0x14b4 <__addsf3+0x1e>
    14a8:	9f 3f       	cpi	r25, 0xFF	; 255
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <__addsf3+0x1a>
    14ac:	1e f4       	brtc	.+6      	; 0x14b4 <__addsf3+0x1e>
    14ae:	c2 c0       	rjmp	.+388    	; 0x1634 <__fp_nan>
    14b0:	0e f4       	brtc	.+2      	; 0x14b4 <__addsf3+0x1e>
    14b2:	e0 95       	com	r30
    14b4:	e7 fb       	bst	r30, 7
    14b6:	b8 c0       	rjmp	.+368    	; 0x1628 <__fp_inf>

000014b8 <__addsf3x>:
    14b8:	e9 2f       	mov	r30, r25
    14ba:	de d0       	rcall	.+444    	; 0x1678 <__fp_split3>
    14bc:	80 f3       	brcs	.-32     	; 0x149e <__addsf3+0x8>
    14be:	ba 17       	cp	r27, r26
    14c0:	62 07       	cpc	r22, r18
    14c2:	73 07       	cpc	r23, r19
    14c4:	84 07       	cpc	r24, r20
    14c6:	95 07       	cpc	r25, r21
    14c8:	18 f0       	brcs	.+6      	; 0x14d0 <__addsf3x+0x18>
    14ca:	71 f4       	brne	.+28     	; 0x14e8 <__addsf3x+0x30>
    14cc:	9e f5       	brtc	.+102    	; 0x1534 <__addsf3x+0x7c>
    14ce:	f6 c0       	rjmp	.+492    	; 0x16bc <__fp_zero>
    14d0:	0e f4       	brtc	.+2      	; 0x14d4 <__addsf3x+0x1c>
    14d2:	e0 95       	com	r30
    14d4:	0b 2e       	mov	r0, r27
    14d6:	ba 2f       	mov	r27, r26
    14d8:	a0 2d       	mov	r26, r0
    14da:	0b 01       	movw	r0, r22
    14dc:	b9 01       	movw	r22, r18
    14de:	90 01       	movw	r18, r0
    14e0:	0c 01       	movw	r0, r24
    14e2:	ca 01       	movw	r24, r20
    14e4:	a0 01       	movw	r20, r0
    14e6:	11 24       	eor	r1, r1
    14e8:	ff 27       	eor	r31, r31
    14ea:	59 1b       	sub	r21, r25
    14ec:	99 f0       	breq	.+38     	; 0x1514 <__addsf3x+0x5c>
    14ee:	59 3f       	cpi	r21, 0xF9	; 249
    14f0:	50 f4       	brcc	.+20     	; 0x1506 <__addsf3x+0x4e>
    14f2:	50 3e       	cpi	r21, 0xE0	; 224
    14f4:	68 f1       	brcs	.+90     	; 0x1550 <__addsf3x+0x98>
    14f6:	1a 16       	cp	r1, r26
    14f8:	f0 40       	sbci	r31, 0x00	; 0
    14fa:	a2 2f       	mov	r26, r18
    14fc:	23 2f       	mov	r18, r19
    14fe:	34 2f       	mov	r19, r20
    1500:	44 27       	eor	r20, r20
    1502:	58 5f       	subi	r21, 0xF8	; 248
    1504:	f3 cf       	rjmp	.-26     	; 0x14ec <__addsf3x+0x34>
    1506:	46 95       	lsr	r20
    1508:	37 95       	ror	r19
    150a:	27 95       	ror	r18
    150c:	a7 95       	ror	r26
    150e:	f0 40       	sbci	r31, 0x00	; 0
    1510:	53 95       	inc	r21
    1512:	c9 f7       	brne	.-14     	; 0x1506 <__addsf3x+0x4e>
    1514:	7e f4       	brtc	.+30     	; 0x1534 <__addsf3x+0x7c>
    1516:	1f 16       	cp	r1, r31
    1518:	ba 0b       	sbc	r27, r26
    151a:	62 0b       	sbc	r22, r18
    151c:	73 0b       	sbc	r23, r19
    151e:	84 0b       	sbc	r24, r20
    1520:	ba f0       	brmi	.+46     	; 0x1550 <__addsf3x+0x98>
    1522:	91 50       	subi	r25, 0x01	; 1
    1524:	a1 f0       	breq	.+40     	; 0x154e <__addsf3x+0x96>
    1526:	ff 0f       	add	r31, r31
    1528:	bb 1f       	adc	r27, r27
    152a:	66 1f       	adc	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	88 1f       	adc	r24, r24
    1530:	c2 f7       	brpl	.-16     	; 0x1522 <__addsf3x+0x6a>
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <__addsf3x+0x98>
    1534:	ba 0f       	add	r27, r26
    1536:	62 1f       	adc	r22, r18
    1538:	73 1f       	adc	r23, r19
    153a:	84 1f       	adc	r24, r20
    153c:	48 f4       	brcc	.+18     	; 0x1550 <__addsf3x+0x98>
    153e:	87 95       	ror	r24
    1540:	77 95       	ror	r23
    1542:	67 95       	ror	r22
    1544:	b7 95       	ror	r27
    1546:	f7 95       	ror	r31
    1548:	9e 3f       	cpi	r25, 0xFE	; 254
    154a:	08 f0       	brcs	.+2      	; 0x154e <__addsf3x+0x96>
    154c:	b3 cf       	rjmp	.-154    	; 0x14b4 <__addsf3+0x1e>
    154e:	93 95       	inc	r25
    1550:	88 0f       	add	r24, r24
    1552:	08 f0       	brcs	.+2      	; 0x1556 <__addsf3x+0x9e>
    1554:	99 27       	eor	r25, r25
    1556:	ee 0f       	add	r30, r30
    1558:	97 95       	ror	r25
    155a:	87 95       	ror	r24
    155c:	08 95       	ret

0000155e <__cmpsf2>:
    155e:	40 d0       	rcall	.+128    	; 0x15e0 <__fp_cmp>
    1560:	08 f4       	brcc	.+2      	; 0x1564 <__cmpsf2+0x6>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	08 95       	ret

00001566 <__floatunsisf>:
    1566:	e8 94       	clt
    1568:	09 c0       	rjmp	.+18     	; 0x157c <__floatsisf+0x12>

0000156a <__floatsisf>:
    156a:	97 fb       	bst	r25, 7
    156c:	3e f4       	brtc	.+14     	; 0x157c <__floatsisf+0x12>
    156e:	90 95       	com	r25
    1570:	80 95       	com	r24
    1572:	70 95       	com	r23
    1574:	61 95       	neg	r22
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8f 4f       	sbci	r24, 0xFF	; 255
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	99 23       	and	r25, r25
    157e:	a9 f0       	breq	.+42     	; 0x15aa <__floatsisf+0x40>
    1580:	f9 2f       	mov	r31, r25
    1582:	96 e9       	ldi	r25, 0x96	; 150
    1584:	bb 27       	eor	r27, r27
    1586:	93 95       	inc	r25
    1588:	f6 95       	lsr	r31
    158a:	87 95       	ror	r24
    158c:	77 95       	ror	r23
    158e:	67 95       	ror	r22
    1590:	b7 95       	ror	r27
    1592:	f1 11       	cpse	r31, r1
    1594:	f8 cf       	rjmp	.-16     	; 0x1586 <__floatsisf+0x1c>
    1596:	fa f4       	brpl	.+62     	; 0x15d6 <__floatsisf+0x6c>
    1598:	bb 0f       	add	r27, r27
    159a:	11 f4       	brne	.+4      	; 0x15a0 <__floatsisf+0x36>
    159c:	60 ff       	sbrs	r22, 0
    159e:	1b c0       	rjmp	.+54     	; 0x15d6 <__floatsisf+0x6c>
    15a0:	6f 5f       	subi	r22, 0xFF	; 255
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	16 c0       	rjmp	.+44     	; 0x15d6 <__floatsisf+0x6c>
    15aa:	88 23       	and	r24, r24
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <__floatsisf+0x48>
    15ae:	96 e9       	ldi	r25, 0x96	; 150
    15b0:	11 c0       	rjmp	.+34     	; 0x15d4 <__floatsisf+0x6a>
    15b2:	77 23       	and	r23, r23
    15b4:	21 f0       	breq	.+8      	; 0x15be <__floatsisf+0x54>
    15b6:	9e e8       	ldi	r25, 0x8E	; 142
    15b8:	87 2f       	mov	r24, r23
    15ba:	76 2f       	mov	r23, r22
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <__floatsisf+0x5e>
    15be:	66 23       	and	r22, r22
    15c0:	71 f0       	breq	.+28     	; 0x15de <__floatsisf+0x74>
    15c2:	96 e8       	ldi	r25, 0x86	; 134
    15c4:	86 2f       	mov	r24, r22
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	2a f0       	brmi	.+10     	; 0x15d6 <__floatsisf+0x6c>
    15cc:	9a 95       	dec	r25
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	da f7       	brpl	.-10     	; 0x15cc <__floatsisf+0x62>
    15d6:	88 0f       	add	r24, r24
    15d8:	96 95       	lsr	r25
    15da:	87 95       	ror	r24
    15dc:	97 f9       	bld	r25, 7
    15de:	08 95       	ret

000015e0 <__fp_cmp>:
    15e0:	99 0f       	add	r25, r25
    15e2:	00 08       	sbc	r0, r0
    15e4:	55 0f       	add	r21, r21
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	e0 e8       	ldi	r30, 0x80	; 128
    15ea:	fe ef       	ldi	r31, 0xFE	; 254
    15ec:	16 16       	cp	r1, r22
    15ee:	17 06       	cpc	r1, r23
    15f0:	e8 07       	cpc	r30, r24
    15f2:	f9 07       	cpc	r31, r25
    15f4:	c0 f0       	brcs	.+48     	; 0x1626 <__fp_cmp+0x46>
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	e4 07       	cpc	r30, r20
    15fc:	f5 07       	cpc	r31, r21
    15fe:	98 f0       	brcs	.+38     	; 0x1626 <__fp_cmp+0x46>
    1600:	62 1b       	sub	r22, r18
    1602:	73 0b       	sbc	r23, r19
    1604:	84 0b       	sbc	r24, r20
    1606:	95 0b       	sbc	r25, r21
    1608:	39 f4       	brne	.+14     	; 0x1618 <__fp_cmp+0x38>
    160a:	0a 26       	eor	r0, r26
    160c:	61 f0       	breq	.+24     	; 0x1626 <__fp_cmp+0x46>
    160e:	23 2b       	or	r18, r19
    1610:	24 2b       	or	r18, r20
    1612:	25 2b       	or	r18, r21
    1614:	21 f4       	brne	.+8      	; 0x161e <__fp_cmp+0x3e>
    1616:	08 95       	ret
    1618:	0a 26       	eor	r0, r26
    161a:	09 f4       	brne	.+2      	; 0x161e <__fp_cmp+0x3e>
    161c:	a1 40       	sbci	r26, 0x01	; 1
    161e:	a6 95       	lsr	r26
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	81 1d       	adc	r24, r1
    1624:	81 1d       	adc	r24, r1
    1626:	08 95       	ret

00001628 <__fp_inf>:
    1628:	97 f9       	bld	r25, 7
    162a:	9f 67       	ori	r25, 0x7F	; 127
    162c:	80 e8       	ldi	r24, 0x80	; 128
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	08 95       	ret

00001634 <__fp_nan>:
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	80 ec       	ldi	r24, 0xC0	; 192
    1638:	08 95       	ret

0000163a <__fp_pscA>:
    163a:	00 24       	eor	r0, r0
    163c:	0a 94       	dec	r0
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	09 06       	cpc	r0, r25
    1646:	08 95       	ret

00001648 <__fp_pscB>:
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	12 16       	cp	r1, r18
    164e:	13 06       	cpc	r1, r19
    1650:	14 06       	cpc	r1, r20
    1652:	05 06       	cpc	r0, r21
    1654:	08 95       	ret

00001656 <__fp_round>:
    1656:	09 2e       	mov	r0, r25
    1658:	03 94       	inc	r0
    165a:	00 0c       	add	r0, r0
    165c:	11 f4       	brne	.+4      	; 0x1662 <__fp_round+0xc>
    165e:	88 23       	and	r24, r24
    1660:	52 f0       	brmi	.+20     	; 0x1676 <__fp_round+0x20>
    1662:	bb 0f       	add	r27, r27
    1664:	40 f4       	brcc	.+16     	; 0x1676 <__fp_round+0x20>
    1666:	bf 2b       	or	r27, r31
    1668:	11 f4       	brne	.+4      	; 0x166e <__fp_round+0x18>
    166a:	60 ff       	sbrs	r22, 0
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <__fp_round+0x20>
    166e:	6f 5f       	subi	r22, 0xFF	; 255
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	08 95       	ret

00001678 <__fp_split3>:
    1678:	57 fd       	sbrc	r21, 7
    167a:	90 58       	subi	r25, 0x80	; 128
    167c:	44 0f       	add	r20, r20
    167e:	55 1f       	adc	r21, r21
    1680:	59 f0       	breq	.+22     	; 0x1698 <__fp_splitA+0x10>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	71 f0       	breq	.+28     	; 0x16a2 <__fp_splitA+0x1a>
    1686:	47 95       	ror	r20

00001688 <__fp_splitA>:
    1688:	88 0f       	add	r24, r24
    168a:	97 fb       	bst	r25, 7
    168c:	99 1f       	adc	r25, r25
    168e:	61 f0       	breq	.+24     	; 0x16a8 <__fp_splitA+0x20>
    1690:	9f 3f       	cpi	r25, 0xFF	; 255
    1692:	79 f0       	breq	.+30     	; 0x16b2 <__fp_splitA+0x2a>
    1694:	87 95       	ror	r24
    1696:	08 95       	ret
    1698:	12 16       	cp	r1, r18
    169a:	13 06       	cpc	r1, r19
    169c:	14 06       	cpc	r1, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	f2 cf       	rjmp	.-28     	; 0x1686 <__fp_split3+0xe>
    16a2:	46 95       	lsr	r20
    16a4:	f1 df       	rcall	.-30     	; 0x1688 <__fp_splitA>
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <__fp_splitA+0x30>
    16a8:	16 16       	cp	r1, r22
    16aa:	17 06       	cpc	r1, r23
    16ac:	18 06       	cpc	r1, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	f1 cf       	rjmp	.-30     	; 0x1694 <__fp_splitA+0xc>
    16b2:	86 95       	lsr	r24
    16b4:	71 05       	cpc	r23, r1
    16b6:	61 05       	cpc	r22, r1
    16b8:	08 94       	sec
    16ba:	08 95       	ret

000016bc <__fp_zero>:
    16bc:	e8 94       	clt

000016be <__fp_szero>:
    16be:	bb 27       	eor	r27, r27
    16c0:	66 27       	eor	r22, r22
    16c2:	77 27       	eor	r23, r23
    16c4:	cb 01       	movw	r24, r22
    16c6:	97 f9       	bld	r25, 7
    16c8:	08 95       	ret

000016ca <__gesf2>:
    16ca:	8a df       	rcall	.-236    	; 0x15e0 <__fp_cmp>
    16cc:	08 f4       	brcc	.+2      	; 0x16d0 <__gesf2+0x6>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	08 95       	ret

000016d2 <__mulsf3>:
    16d2:	0b d0       	rcall	.+22     	; 0x16ea <__mulsf3x>
    16d4:	c0 cf       	rjmp	.-128    	; 0x1656 <__fp_round>
    16d6:	b1 df       	rcall	.-158    	; 0x163a <__fp_pscA>
    16d8:	28 f0       	brcs	.+10     	; 0x16e4 <__mulsf3+0x12>
    16da:	b6 df       	rcall	.-148    	; 0x1648 <__fp_pscB>
    16dc:	18 f0       	brcs	.+6      	; 0x16e4 <__mulsf3+0x12>
    16de:	95 23       	and	r25, r21
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <__mulsf3+0x12>
    16e2:	a2 cf       	rjmp	.-188    	; 0x1628 <__fp_inf>
    16e4:	a7 cf       	rjmp	.-178    	; 0x1634 <__fp_nan>
    16e6:	11 24       	eor	r1, r1
    16e8:	ea cf       	rjmp	.-44     	; 0x16be <__fp_szero>

000016ea <__mulsf3x>:
    16ea:	c6 df       	rcall	.-116    	; 0x1678 <__fp_split3>
    16ec:	a0 f3       	brcs	.-24     	; 0x16d6 <__mulsf3+0x4>

000016ee <__mulsf3_pse>:
    16ee:	95 9f       	mul	r25, r21
    16f0:	d1 f3       	breq	.-12     	; 0x16e6 <__mulsf3+0x14>
    16f2:	95 0f       	add	r25, r21
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	55 1f       	adc	r21, r21
    16f8:	62 9f       	mul	r22, r18
    16fa:	f0 01       	movw	r30, r0
    16fc:	72 9f       	mul	r23, r18
    16fe:	bb 27       	eor	r27, r27
    1700:	f0 0d       	add	r31, r0
    1702:	b1 1d       	adc	r27, r1
    1704:	63 9f       	mul	r22, r19
    1706:	aa 27       	eor	r26, r26
    1708:	f0 0d       	add	r31, r0
    170a:	b1 1d       	adc	r27, r1
    170c:	aa 1f       	adc	r26, r26
    170e:	64 9f       	mul	r22, r20
    1710:	66 27       	eor	r22, r22
    1712:	b0 0d       	add	r27, r0
    1714:	a1 1d       	adc	r26, r1
    1716:	66 1f       	adc	r22, r22
    1718:	82 9f       	mul	r24, r18
    171a:	22 27       	eor	r18, r18
    171c:	b0 0d       	add	r27, r0
    171e:	a1 1d       	adc	r26, r1
    1720:	62 1f       	adc	r22, r18
    1722:	73 9f       	mul	r23, r19
    1724:	b0 0d       	add	r27, r0
    1726:	a1 1d       	adc	r26, r1
    1728:	62 1f       	adc	r22, r18
    172a:	83 9f       	mul	r24, r19
    172c:	a0 0d       	add	r26, r0
    172e:	61 1d       	adc	r22, r1
    1730:	22 1f       	adc	r18, r18
    1732:	74 9f       	mul	r23, r20
    1734:	33 27       	eor	r19, r19
    1736:	a0 0d       	add	r26, r0
    1738:	61 1d       	adc	r22, r1
    173a:	23 1f       	adc	r18, r19
    173c:	84 9f       	mul	r24, r20
    173e:	60 0d       	add	r22, r0
    1740:	21 1d       	adc	r18, r1
    1742:	82 2f       	mov	r24, r18
    1744:	76 2f       	mov	r23, r22
    1746:	6a 2f       	mov	r22, r26
    1748:	11 24       	eor	r1, r1
    174a:	9f 57       	subi	r25, 0x7F	; 127
    174c:	50 40       	sbci	r21, 0x00	; 0
    174e:	8a f0       	brmi	.+34     	; 0x1772 <__mulsf3_pse+0x84>
    1750:	e1 f0       	breq	.+56     	; 0x178a <__mulsf3_pse+0x9c>
    1752:	88 23       	and	r24, r24
    1754:	4a f0       	brmi	.+18     	; 0x1768 <__mulsf3_pse+0x7a>
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	bb 1f       	adc	r27, r27
    175c:	66 1f       	adc	r22, r22
    175e:	77 1f       	adc	r23, r23
    1760:	88 1f       	adc	r24, r24
    1762:	91 50       	subi	r25, 0x01	; 1
    1764:	50 40       	sbci	r21, 0x00	; 0
    1766:	a9 f7       	brne	.-22     	; 0x1752 <__mulsf3_pse+0x64>
    1768:	9e 3f       	cpi	r25, 0xFE	; 254
    176a:	51 05       	cpc	r21, r1
    176c:	70 f0       	brcs	.+28     	; 0x178a <__mulsf3_pse+0x9c>
    176e:	5c cf       	rjmp	.-328    	; 0x1628 <__fp_inf>
    1770:	a6 cf       	rjmp	.-180    	; 0x16be <__fp_szero>
    1772:	5f 3f       	cpi	r21, 0xFF	; 255
    1774:	ec f3       	brlt	.-6      	; 0x1770 <__mulsf3_pse+0x82>
    1776:	98 3e       	cpi	r25, 0xE8	; 232
    1778:	dc f3       	brlt	.-10     	; 0x1770 <__mulsf3_pse+0x82>
    177a:	86 95       	lsr	r24
    177c:	77 95       	ror	r23
    177e:	67 95       	ror	r22
    1780:	b7 95       	ror	r27
    1782:	f7 95       	ror	r31
    1784:	e7 95       	ror	r30
    1786:	9f 5f       	subi	r25, 0xFF	; 255
    1788:	c1 f7       	brne	.-16     	; 0x177a <__mulsf3_pse+0x8c>
    178a:	fe 2b       	or	r31, r30
    178c:	88 0f       	add	r24, r24
    178e:	91 1d       	adc	r25, r1
    1790:	96 95       	lsr	r25
    1792:	87 95       	ror	r24
    1794:	97 f9       	bld	r25, 7
    1796:	08 95       	ret

00001798 <__divmodhi4>:
    1798:	97 fb       	bst	r25, 7
    179a:	09 2e       	mov	r0, r25
    179c:	07 26       	eor	r0, r23
    179e:	0a d0       	rcall	.+20     	; 0x17b4 <__divmodhi4_neg1>
    17a0:	77 fd       	sbrc	r23, 7
    17a2:	04 d0       	rcall	.+8      	; 0x17ac <__divmodhi4_neg2>
    17a4:	0c d0       	rcall	.+24     	; 0x17be <__udivmodhi4>
    17a6:	06 d0       	rcall	.+12     	; 0x17b4 <__divmodhi4_neg1>
    17a8:	00 20       	and	r0, r0
    17aa:	1a f4       	brpl	.+6      	; 0x17b2 <__divmodhi4_exit>

000017ac <__divmodhi4_neg2>:
    17ac:	70 95       	com	r23
    17ae:	61 95       	neg	r22
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255

000017b2 <__divmodhi4_exit>:
    17b2:	08 95       	ret

000017b4 <__divmodhi4_neg1>:
    17b4:	f6 f7       	brtc	.-4      	; 0x17b2 <__divmodhi4_exit>
    17b6:	90 95       	com	r25
    17b8:	81 95       	neg	r24
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	08 95       	ret

000017be <__udivmodhi4>:
    17be:	aa 1b       	sub	r26, r26
    17c0:	bb 1b       	sub	r27, r27
    17c2:	51 e1       	ldi	r21, 0x11	; 17
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <__udivmodhi4_ep>

000017c6 <__udivmodhi4_loop>:
    17c6:	aa 1f       	adc	r26, r26
    17c8:	bb 1f       	adc	r27, r27
    17ca:	a6 17       	cp	r26, r22
    17cc:	b7 07       	cpc	r27, r23
    17ce:	10 f0       	brcs	.+4      	; 0x17d4 <__udivmodhi4_ep>
    17d0:	a6 1b       	sub	r26, r22
    17d2:	b7 0b       	sbc	r27, r23

000017d4 <__udivmodhi4_ep>:
    17d4:	88 1f       	adc	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	5a 95       	dec	r21
    17da:	a9 f7       	brne	.-22     	; 0x17c6 <__udivmodhi4_loop>
    17dc:	80 95       	com	r24
    17de:	90 95       	com	r25
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	08 95       	ret

000017e6 <dtostrf>:
    17e6:	ef 92       	push	r14
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	32 2f       	mov	r19, r18
    17f0:	c0 2f       	mov	r28, r16
    17f2:	47 ff       	sbrs	r20, 7
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <dtostrf+0x14>
    17f6:	a4 e1       	ldi	r26, 0x14	; 20
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <dtostrf+0x16>
    17fa:	a4 e0       	ldi	r26, 0x04	; 4
    17fc:	e4 2f       	mov	r30, r20
    17fe:	ff 27       	eor	r31, r31
    1800:	e7 fd       	sbrc	r30, 7
    1802:	f0 95       	com	r31
    1804:	f7 ff       	sbrs	r31, 7
    1806:	03 c0       	rjmp	.+6      	; 0x180e <dtostrf+0x28>
    1808:	f0 95       	com	r31
    180a:	e1 95       	neg	r30
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	4c 2f       	mov	r20, r28
    1810:	51 2f       	mov	r21, r17
    1812:	2e 2f       	mov	r18, r30
    1814:	03 2f       	mov	r16, r19
    1816:	ea 2e       	mov	r14, r26
    1818:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <dtoa_prf>
    181c:	8c 2f       	mov	r24, r28
    181e:	91 2f       	mov	r25, r17
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret

0000182a <atoi>:
    182a:	fc 01       	movw	r30, r24
    182c:	88 27       	eor	r24, r24
    182e:	99 27       	eor	r25, r25
    1830:	e8 94       	clt
    1832:	21 91       	ld	r18, Z+
    1834:	20 32       	cpi	r18, 0x20	; 32
    1836:	e9 f3       	breq	.-6      	; 0x1832 <atoi+0x8>
    1838:	29 30       	cpi	r18, 0x09	; 9
    183a:	10 f0       	brcs	.+4      	; 0x1840 <atoi+0x16>
    183c:	2e 30       	cpi	r18, 0x0E	; 14
    183e:	c8 f3       	brcs	.-14     	; 0x1832 <atoi+0x8>
    1840:	2b 32       	cpi	r18, 0x2B	; 43
    1842:	41 f0       	breq	.+16     	; 0x1854 <atoi+0x2a>
    1844:	2d 32       	cpi	r18, 0x2D	; 45
    1846:	39 f4       	brne	.+14     	; 0x1856 <atoi+0x2c>
    1848:	68 94       	set
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <atoi+0x2a>
    184c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__mulhi_const_10>
    1850:	82 0f       	add	r24, r18
    1852:	91 1d       	adc	r25, r1
    1854:	21 91       	ld	r18, Z+
    1856:	20 53       	subi	r18, 0x30	; 48
    1858:	2a 30       	cpi	r18, 0x0A	; 10
    185a:	c0 f3       	brcs	.-16     	; 0x184c <atoi+0x22>
    185c:	1e f4       	brtc	.+6      	; 0x1864 <atoi+0x3a>
    185e:	90 95       	com	r25
    1860:	81 95       	neg	r24
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <strcasecmp>:
    1866:	fb 01       	movw	r30, r22
    1868:	dc 01       	movw	r26, r24
    186a:	8d 91       	ld	r24, X+
    186c:	81 34       	cpi	r24, 0x41	; 65
    186e:	1c f0       	brlt	.+6      	; 0x1876 <strcasecmp+0x10>
    1870:	8b 35       	cpi	r24, 0x5B	; 91
    1872:	0c f4       	brge	.+2      	; 0x1876 <strcasecmp+0x10>
    1874:	80 5e       	subi	r24, 0xE0	; 224
    1876:	61 91       	ld	r22, Z+
    1878:	61 34       	cpi	r22, 0x41	; 65
    187a:	1c f0       	brlt	.+6      	; 0x1882 <strcasecmp+0x1c>
    187c:	6b 35       	cpi	r22, 0x5B	; 91
    187e:	0c f4       	brge	.+2      	; 0x1882 <strcasecmp+0x1c>
    1880:	60 5e       	subi	r22, 0xE0	; 224
    1882:	86 1b       	sub	r24, r22
    1884:	61 11       	cpse	r22, r1
    1886:	89 f3       	breq	.-30     	; 0x186a <strcasecmp+0x4>
    1888:	99 0b       	sbc	r25, r25
    188a:	08 95       	ret

0000188c <strcat>:
    188c:	fb 01       	movw	r30, r22
    188e:	dc 01       	movw	r26, r24
    1890:	0d 90       	ld	r0, X+
    1892:	00 20       	and	r0, r0
    1894:	e9 f7       	brne	.-6      	; 0x1890 <strcat+0x4>
    1896:	11 97       	sbiw	r26, 0x01	; 1
    1898:	01 90       	ld	r0, Z+
    189a:	0d 92       	st	X+, r0
    189c:	00 20       	and	r0, r0
    189e:	e1 f7       	brne	.-8      	; 0x1898 <strcat+0xc>
    18a0:	08 95       	ret

000018a2 <strchr>:
    18a2:	fc 01       	movw	r30, r24
    18a4:	81 91       	ld	r24, Z+
    18a6:	86 17       	cp	r24, r22
    18a8:	21 f0       	breq	.+8      	; 0x18b2 <strchr+0x10>
    18aa:	88 23       	and	r24, r24
    18ac:	d9 f7       	brne	.-10     	; 0x18a4 <strchr+0x2>
    18ae:	99 27       	eor	r25, r25
    18b0:	08 95       	ret
    18b2:	31 97       	sbiw	r30, 0x01	; 1
    18b4:	cf 01       	movw	r24, r30
    18b6:	08 95       	ret

000018b8 <strcpy>:
    18b8:	fb 01       	movw	r30, r22
    18ba:	dc 01       	movw	r26, r24
    18bc:	01 90       	ld	r0, Z+
    18be:	0d 92       	st	X+, r0
    18c0:	00 20       	and	r0, r0
    18c2:	e1 f7       	brne	.-8      	; 0x18bc <strcpy+0x4>
    18c4:	08 95       	ret

000018c6 <strncasecmp>:
    18c6:	fb 01       	movw	r30, r22
    18c8:	dc 01       	movw	r26, r24
    18ca:	41 50       	subi	r20, 0x01	; 1
    18cc:	50 40       	sbci	r21, 0x00	; 0
    18ce:	88 f0       	brcs	.+34     	; 0x18f2 <strncasecmp+0x2c>
    18d0:	8d 91       	ld	r24, X+
    18d2:	81 34       	cpi	r24, 0x41	; 65
    18d4:	1c f0       	brlt	.+6      	; 0x18dc <strncasecmp+0x16>
    18d6:	8b 35       	cpi	r24, 0x5B	; 91
    18d8:	0c f4       	brge	.+2      	; 0x18dc <strncasecmp+0x16>
    18da:	80 5e       	subi	r24, 0xE0	; 224
    18dc:	61 91       	ld	r22, Z+
    18de:	61 34       	cpi	r22, 0x41	; 65
    18e0:	1c f0       	brlt	.+6      	; 0x18e8 <strncasecmp+0x22>
    18e2:	6b 35       	cpi	r22, 0x5B	; 91
    18e4:	0c f4       	brge	.+2      	; 0x18e8 <strncasecmp+0x22>
    18e6:	60 5e       	subi	r22, 0xE0	; 224
    18e8:	86 1b       	sub	r24, r22
    18ea:	61 11       	cpse	r22, r1
    18ec:	71 f3       	breq	.-36     	; 0x18ca <strncasecmp+0x4>
    18ee:	99 0b       	sbc	r25, r25
    18f0:	08 95       	ret
    18f2:	88 1b       	sub	r24, r24
    18f4:	fc cf       	rjmp	.-8      	; 0x18ee <strncasecmp+0x28>

000018f6 <itoa>:
    18f6:	fb 01       	movw	r30, r22
    18f8:	9f 01       	movw	r18, r30
    18fa:	e8 94       	clt
    18fc:	42 30       	cpi	r20, 0x02	; 2
    18fe:	c4 f0       	brlt	.+48     	; 0x1930 <itoa+0x3a>
    1900:	45 32       	cpi	r20, 0x25	; 37
    1902:	b4 f4       	brge	.+44     	; 0x1930 <itoa+0x3a>
    1904:	4a 30       	cpi	r20, 0x0A	; 10
    1906:	29 f4       	brne	.+10     	; 0x1912 <itoa+0x1c>
    1908:	97 fb       	bst	r25, 7
    190a:	1e f4       	brtc	.+6      	; 0x1912 <itoa+0x1c>
    190c:	90 95       	com	r25
    190e:	81 95       	neg	r24
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	64 2f       	mov	r22, r20
    1914:	77 27       	eor	r23, r23
    1916:	0e 94 df 0b 	call	0x17be	; 0x17be <__udivmodhi4>
    191a:	80 5d       	subi	r24, 0xD0	; 208
    191c:	8a 33       	cpi	r24, 0x3A	; 58
    191e:	0c f0       	brlt	.+2      	; 0x1922 <itoa+0x2c>
    1920:	89 5d       	subi	r24, 0xD9	; 217
    1922:	81 93       	st	Z+, r24
    1924:	cb 01       	movw	r24, r22
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	a1 f7       	brne	.-24     	; 0x1912 <itoa+0x1c>
    192a:	16 f4       	brtc	.+4      	; 0x1930 <itoa+0x3a>
    192c:	5d e2       	ldi	r21, 0x2D	; 45
    192e:	51 93       	st	Z+, r21
    1930:	10 82       	st	Z, r1
    1932:	c9 01       	movw	r24, r18
    1934:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <strrev>

00001938 <__mulhi_const_10>:
    1938:	7a e0       	ldi	r23, 0x0A	; 10
    193a:	97 9f       	mul	r25, r23
    193c:	90 2d       	mov	r25, r0
    193e:	87 9f       	mul	r24, r23
    1940:	80 2d       	mov	r24, r0
    1942:	91 0d       	add	r25, r1
    1944:	11 24       	eor	r1, r1
    1946:	08 95       	ret

00001948 <sprintf>:
    1948:	ae e0       	ldi	r26, 0x0E	; 14
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ea ea       	ldi	r30, 0xAA	; 170
    194e:	fc e0       	ldi	r31, 0x0C	; 12
    1950:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x1c>
    1954:	0d 89       	ldd	r16, Y+21	; 0x15
    1956:	1e 89       	ldd	r17, Y+22	; 0x16
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	8c 83       	std	Y+4, r24	; 0x04
    195c:	1a 83       	std	Y+2, r17	; 0x02
    195e:	09 83       	std	Y+1, r16	; 0x01
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	9f e7       	ldi	r25, 0x7F	; 127
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	ae 01       	movw	r20, r28
    196a:	47 5e       	subi	r20, 0xE7	; 231
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	ce 01       	movw	r24, r28
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	6f 89       	ldd	r22, Y+23	; 0x17
    1974:	78 8d       	ldd	r23, Y+24	; 0x18
    1976:	0e 94 c6 0c 	call	0x198c	; 0x198c <vfprintf>
    197a:	ef 81       	ldd	r30, Y+7	; 0x07
    197c:	f8 85       	ldd	r31, Y+8	; 0x08
    197e:	e0 0f       	add	r30, r16
    1980:	f1 1f       	adc	r31, r17
    1982:	10 82       	st	Z, r1
    1984:	2e 96       	adiw	r28, 0x0e	; 14
    1986:	e4 e0       	ldi	r30, 0x04	; 4
    1988:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x1c>

0000198c <vfprintf>:
    198c:	ad e0       	ldi	r26, 0x0D	; 13
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ec ec       	ldi	r30, 0xCC	; 204
    1992:	fc e0       	ldi	r31, 0x0C	; 12
    1994:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__>
    1998:	3c 01       	movw	r6, r24
    199a:	7d 87       	std	Y+13, r23	; 0x0d
    199c:	6c 87       	std	Y+12, r22	; 0x0c
    199e:	5a 01       	movw	r10, r20
    19a0:	fc 01       	movw	r30, r24
    19a2:	17 82       	std	Z+7, r1	; 0x07
    19a4:	16 82       	std	Z+6, r1	; 0x06
    19a6:	83 81       	ldd	r24, Z+3	; 0x03
    19a8:	81 ff       	sbrs	r24, 1
    19aa:	c8 c1       	rjmp	.+912    	; 0x1d3c <vfprintf+0x3b0>
    19ac:	2e 01       	movw	r4, r28
    19ae:	08 94       	sec
    19b0:	41 1c       	adc	r4, r1
    19b2:	51 1c       	adc	r5, r1
    19b4:	f3 01       	movw	r30, r6
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    19ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    19bc:	93 fd       	sbrc	r25, 3
    19be:	85 91       	lpm	r24, Z+
    19c0:	93 ff       	sbrs	r25, 3
    19c2:	81 91       	ld	r24, Z+
    19c4:	fd 87       	std	Y+13, r31	; 0x0d
    19c6:	ec 87       	std	Y+12, r30	; 0x0c
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <vfprintf+0x42>
    19cc:	b3 c1       	rjmp	.+870    	; 0x1d34 <vfprintf+0x3a8>
    19ce:	85 32       	cpi	r24, 0x25	; 37
    19d0:	41 f4       	brne	.+16     	; 0x19e2 <vfprintf+0x56>
    19d2:	93 fd       	sbrc	r25, 3
    19d4:	85 91       	lpm	r24, Z+
    19d6:	93 ff       	sbrs	r25, 3
    19d8:	81 91       	ld	r24, Z+
    19da:	fd 87       	std	Y+13, r31	; 0x0d
    19dc:	ec 87       	std	Y+12, r30	; 0x0c
    19de:	85 32       	cpi	r24, 0x25	; 37
    19e0:	29 f4       	brne	.+10     	; 0x19ec <vfprintf+0x60>
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	b3 01       	movw	r22, r6
    19e6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    19ea:	e4 cf       	rjmp	.-56     	; 0x19b4 <vfprintf+0x28>
    19ec:	ff 24       	eor	r15, r15
    19ee:	ee 24       	eor	r14, r14
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	10 32       	cpi	r17, 0x20	; 32
    19f4:	b0 f4       	brcc	.+44     	; 0x1a22 <vfprintf+0x96>
    19f6:	8b 32       	cpi	r24, 0x2B	; 43
    19f8:	69 f0       	breq	.+26     	; 0x1a14 <vfprintf+0x88>
    19fa:	8c 32       	cpi	r24, 0x2C	; 44
    19fc:	28 f4       	brcc	.+10     	; 0x1a08 <vfprintf+0x7c>
    19fe:	80 32       	cpi	r24, 0x20	; 32
    1a00:	51 f0       	breq	.+20     	; 0x1a16 <vfprintf+0x8a>
    1a02:	83 32       	cpi	r24, 0x23	; 35
    1a04:	71 f4       	brne	.+28     	; 0x1a22 <vfprintf+0x96>
    1a06:	0b c0       	rjmp	.+22     	; 0x1a1e <vfprintf+0x92>
    1a08:	8d 32       	cpi	r24, 0x2D	; 45
    1a0a:	39 f0       	breq	.+14     	; 0x1a1a <vfprintf+0x8e>
    1a0c:	80 33       	cpi	r24, 0x30	; 48
    1a0e:	49 f4       	brne	.+18     	; 0x1a22 <vfprintf+0x96>
    1a10:	11 60       	ori	r17, 0x01	; 1
    1a12:	2c c0       	rjmp	.+88     	; 0x1a6c <vfprintf+0xe0>
    1a14:	12 60       	ori	r17, 0x02	; 2
    1a16:	14 60       	ori	r17, 0x04	; 4
    1a18:	29 c0       	rjmp	.+82     	; 0x1a6c <vfprintf+0xe0>
    1a1a:	18 60       	ori	r17, 0x08	; 8
    1a1c:	27 c0       	rjmp	.+78     	; 0x1a6c <vfprintf+0xe0>
    1a1e:	10 61       	ori	r17, 0x10	; 16
    1a20:	25 c0       	rjmp	.+74     	; 0x1a6c <vfprintf+0xe0>
    1a22:	17 fd       	sbrc	r17, 7
    1a24:	2e c0       	rjmp	.+92     	; 0x1a82 <vfprintf+0xf6>
    1a26:	28 2f       	mov	r18, r24
    1a28:	20 53       	subi	r18, 0x30	; 48
    1a2a:	2a 30       	cpi	r18, 0x0A	; 10
    1a2c:	98 f4       	brcc	.+38     	; 0x1a54 <vfprintf+0xc8>
    1a2e:	16 ff       	sbrs	r17, 6
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <vfprintf+0xb6>
    1a32:	8f 2d       	mov	r24, r15
    1a34:	88 0f       	add	r24, r24
    1a36:	f8 2e       	mov	r15, r24
    1a38:	ff 0c       	add	r15, r15
    1a3a:	ff 0c       	add	r15, r15
    1a3c:	f8 0e       	add	r15, r24
    1a3e:	f2 0e       	add	r15, r18
    1a40:	15 c0       	rjmp	.+42     	; 0x1a6c <vfprintf+0xe0>
    1a42:	8e 2d       	mov	r24, r14
    1a44:	88 0f       	add	r24, r24
    1a46:	e8 2e       	mov	r14, r24
    1a48:	ee 0c       	add	r14, r14
    1a4a:	ee 0c       	add	r14, r14
    1a4c:	e8 0e       	add	r14, r24
    1a4e:	e2 0e       	add	r14, r18
    1a50:	10 62       	ori	r17, 0x20	; 32
    1a52:	0c c0       	rjmp	.+24     	; 0x1a6c <vfprintf+0xe0>
    1a54:	8e 32       	cpi	r24, 0x2E	; 46
    1a56:	21 f4       	brne	.+8      	; 0x1a60 <vfprintf+0xd4>
    1a58:	16 fd       	sbrc	r17, 6
    1a5a:	6c c1       	rjmp	.+728    	; 0x1d34 <vfprintf+0x3a8>
    1a5c:	10 64       	ori	r17, 0x40	; 64
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <vfprintf+0xe0>
    1a60:	8c 36       	cpi	r24, 0x6C	; 108
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <vfprintf+0xdc>
    1a64:	10 68       	ori	r17, 0x80	; 128
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <vfprintf+0xe0>
    1a68:	88 36       	cpi	r24, 0x68	; 104
    1a6a:	59 f4       	brne	.+22     	; 0x1a82 <vfprintf+0xf6>
    1a6c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a6e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a70:	93 fd       	sbrc	r25, 3
    1a72:	85 91       	lpm	r24, Z+
    1a74:	93 ff       	sbrs	r25, 3
    1a76:	81 91       	ld	r24, Z+
    1a78:	fd 87       	std	Y+13, r31	; 0x0d
    1a7a:	ec 87       	std	Y+12, r30	; 0x0c
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <vfprintf+0xf6>
    1a80:	b8 cf       	rjmp	.-144    	; 0x19f2 <vfprintf+0x66>
    1a82:	98 2f       	mov	r25, r24
    1a84:	95 54       	subi	r25, 0x45	; 69
    1a86:	93 30       	cpi	r25, 0x03	; 3
    1a88:	18 f0       	brcs	.+6      	; 0x1a90 <vfprintf+0x104>
    1a8a:	90 52       	subi	r25, 0x20	; 32
    1a8c:	93 30       	cpi	r25, 0x03	; 3
    1a8e:	38 f4       	brcc	.+14     	; 0x1a9e <vfprintf+0x112>
    1a90:	24 e0       	ldi	r18, 0x04	; 4
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	a2 0e       	add	r10, r18
    1a96:	b3 1e       	adc	r11, r19
    1a98:	3f e3       	ldi	r19, 0x3F	; 63
    1a9a:	39 83       	std	Y+1, r19	; 0x01
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <vfprintf+0x130>
    1a9e:	83 36       	cpi	r24, 0x63	; 99
    1aa0:	31 f0       	breq	.+12     	; 0x1aae <vfprintf+0x122>
    1aa2:	83 37       	cpi	r24, 0x73	; 115
    1aa4:	81 f0       	breq	.+32     	; 0x1ac6 <vfprintf+0x13a>
    1aa6:	83 35       	cpi	r24, 0x53	; 83
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <vfprintf+0x120>
    1aaa:	5a c0       	rjmp	.+180    	; 0x1b60 <vfprintf+0x1d4>
    1aac:	22 c0       	rjmp	.+68     	; 0x1af2 <vfprintf+0x166>
    1aae:	f5 01       	movw	r30, r10
    1ab0:	80 81       	ld	r24, Z
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	22 e0       	ldi	r18, 0x02	; 2
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	a2 0e       	add	r10, r18
    1aba:	b3 1e       	adc	r11, r19
    1abc:	21 e0       	ldi	r18, 0x01	; 1
    1abe:	c2 2e       	mov	r12, r18
    1ac0:	d1 2c       	mov	r13, r1
    1ac2:	42 01       	movw	r8, r4
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <vfprintf+0x162>
    1ac6:	92 e0       	ldi	r25, 0x02	; 2
    1ac8:	29 2e       	mov	r2, r25
    1aca:	31 2c       	mov	r3, r1
    1acc:	2a 0c       	add	r2, r10
    1ace:	3b 1c       	adc	r3, r11
    1ad0:	f5 01       	movw	r30, r10
    1ad2:	80 80       	ld	r8, Z
    1ad4:	91 80       	ldd	r9, Z+1	; 0x01
    1ad6:	16 ff       	sbrs	r17, 6
    1ad8:	03 c0       	rjmp	.+6      	; 0x1ae0 <vfprintf+0x154>
    1ada:	6f 2d       	mov	r22, r15
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfprintf+0x158>
    1ae0:	6f ef       	ldi	r22, 0xFF	; 255
    1ae2:	7f ef       	ldi	r23, 0xFF	; 255
    1ae4:	c4 01       	movw	r24, r8
    1ae6:	0e 94 df 10 	call	0x21be	; 0x21be <strnlen>
    1aea:	6c 01       	movw	r12, r24
    1aec:	51 01       	movw	r10, r2
    1aee:	1f 77       	andi	r17, 0x7F	; 127
    1af0:	15 c0       	rjmp	.+42     	; 0x1b1c <vfprintf+0x190>
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	28 2e       	mov	r2, r24
    1af6:	31 2c       	mov	r3, r1
    1af8:	2a 0c       	add	r2, r10
    1afa:	3b 1c       	adc	r3, r11
    1afc:	f5 01       	movw	r30, r10
    1afe:	80 80       	ld	r8, Z
    1b00:	91 80       	ldd	r9, Z+1	; 0x01
    1b02:	16 ff       	sbrs	r17, 6
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <vfprintf+0x180>
    1b06:	6f 2d       	mov	r22, r15
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x184>
    1b0c:	6f ef       	ldi	r22, 0xFF	; 255
    1b0e:	7f ef       	ldi	r23, 0xFF	; 255
    1b10:	c4 01       	movw	r24, r8
    1b12:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <strnlen_P>
    1b16:	6c 01       	movw	r12, r24
    1b18:	10 68       	ori	r17, 0x80	; 128
    1b1a:	51 01       	movw	r10, r2
    1b1c:	13 fd       	sbrc	r17, 3
    1b1e:	1c c0       	rjmp	.+56     	; 0x1b58 <vfprintf+0x1cc>
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <vfprintf+0x1a2>
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	b3 01       	movw	r22, r6
    1b28:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1b2c:	ea 94       	dec	r14
    1b2e:	8e 2d       	mov	r24, r14
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	c8 16       	cp	r12, r24
    1b34:	d9 06       	cpc	r13, r25
    1b36:	a8 f3       	brcs	.-22     	; 0x1b22 <vfprintf+0x196>
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <vfprintf+0x1cc>
    1b3a:	f4 01       	movw	r30, r8
    1b3c:	17 fd       	sbrc	r17, 7
    1b3e:	85 91       	lpm	r24, Z+
    1b40:	17 ff       	sbrs	r17, 7
    1b42:	81 91       	ld	r24, Z+
    1b44:	4f 01       	movw	r8, r30
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	b3 01       	movw	r22, r6
    1b4a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1b4e:	e1 10       	cpse	r14, r1
    1b50:	ea 94       	dec	r14
    1b52:	08 94       	sec
    1b54:	c1 08       	sbc	r12, r1
    1b56:	d1 08       	sbc	r13, r1
    1b58:	c1 14       	cp	r12, r1
    1b5a:	d1 04       	cpc	r13, r1
    1b5c:	71 f7       	brne	.-36     	; 0x1b3a <vfprintf+0x1ae>
    1b5e:	e7 c0       	rjmp	.+462    	; 0x1d2e <vfprintf+0x3a2>
    1b60:	84 36       	cpi	r24, 0x64	; 100
    1b62:	11 f0       	breq	.+4      	; 0x1b68 <vfprintf+0x1dc>
    1b64:	89 36       	cpi	r24, 0x69	; 105
    1b66:	51 f5       	brne	.+84     	; 0x1bbc <vfprintf+0x230>
    1b68:	f5 01       	movw	r30, r10
    1b6a:	17 ff       	sbrs	r17, 7
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <vfprintf+0x1f0>
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	a2 81       	ldd	r26, Z+2	; 0x02
    1b74:	b3 81       	ldd	r27, Z+3	; 0x03
    1b76:	24 e0       	ldi	r18, 0x04	; 4
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <vfprintf+0x200>
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	aa 27       	eor	r26, r26
    1b82:	97 fd       	sbrc	r25, 7
    1b84:	a0 95       	com	r26
    1b86:	ba 2f       	mov	r27, r26
    1b88:	22 e0       	ldi	r18, 0x02	; 2
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	a2 0e       	add	r10, r18
    1b8e:	b3 1e       	adc	r11, r19
    1b90:	01 2f       	mov	r16, r17
    1b92:	0f 76       	andi	r16, 0x6F	; 111
    1b94:	b7 ff       	sbrs	r27, 7
    1b96:	08 c0       	rjmp	.+16     	; 0x1ba8 <vfprintf+0x21c>
    1b98:	b0 95       	com	r27
    1b9a:	a0 95       	com	r26
    1b9c:	90 95       	com	r25
    1b9e:	81 95       	neg	r24
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	af 4f       	sbci	r26, 0xFF	; 255
    1ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba6:	00 68       	ori	r16, 0x80	; 128
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	a2 01       	movw	r20, r4
    1bae:	2a e0       	ldi	r18, 0x0A	; 10
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	0e 94 26 11 	call	0x224c	; 0x224c <__ultoa_invert>
    1bb6:	d8 2e       	mov	r13, r24
    1bb8:	d4 18       	sub	r13, r4
    1bba:	3f c0       	rjmp	.+126    	; 0x1c3a <vfprintf+0x2ae>
    1bbc:	85 37       	cpi	r24, 0x75	; 117
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <vfprintf+0x23c>
    1bc0:	1f 7e       	andi	r17, 0xEF	; 239
    1bc2:	2a e0       	ldi	r18, 0x0A	; 10
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	20 c0       	rjmp	.+64     	; 0x1c08 <vfprintf+0x27c>
    1bc8:	19 7f       	andi	r17, 0xF9	; 249
    1bca:	8f 36       	cpi	r24, 0x6F	; 111
    1bcc:	a9 f0       	breq	.+42     	; 0x1bf8 <vfprintf+0x26c>
    1bce:	80 37       	cpi	r24, 0x70	; 112
    1bd0:	20 f4       	brcc	.+8      	; 0x1bda <vfprintf+0x24e>
    1bd2:	88 35       	cpi	r24, 0x58	; 88
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <vfprintf+0x24c>
    1bd6:	ae c0       	rjmp	.+348    	; 0x1d34 <vfprintf+0x3a8>
    1bd8:	0b c0       	rjmp	.+22     	; 0x1bf0 <vfprintf+0x264>
    1bda:	80 37       	cpi	r24, 0x70	; 112
    1bdc:	21 f0       	breq	.+8      	; 0x1be6 <vfprintf+0x25a>
    1bde:	88 37       	cpi	r24, 0x78	; 120
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <vfprintf+0x258>
    1be2:	a8 c0       	rjmp	.+336    	; 0x1d34 <vfprintf+0x3a8>
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <vfprintf+0x25c>
    1be6:	10 61       	ori	r17, 0x10	; 16
    1be8:	14 ff       	sbrs	r17, 4
    1bea:	09 c0       	rjmp	.+18     	; 0x1bfe <vfprintf+0x272>
    1bec:	14 60       	ori	r17, 0x04	; 4
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <vfprintf+0x272>
    1bf0:	14 ff       	sbrs	r17, 4
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <vfprintf+0x278>
    1bf4:	16 60       	ori	r17, 0x06	; 6
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <vfprintf+0x278>
    1bf8:	28 e0       	ldi	r18, 0x08	; 8
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <vfprintf+0x27c>
    1bfe:	20 e1       	ldi	r18, 0x10	; 16
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <vfprintf+0x27c>
    1c04:	20 e1       	ldi	r18, 0x10	; 16
    1c06:	32 e0       	ldi	r19, 0x02	; 2
    1c08:	f5 01       	movw	r30, r10
    1c0a:	17 ff       	sbrs	r17, 7
    1c0c:	07 c0       	rjmp	.+14     	; 0x1c1c <vfprintf+0x290>
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	44 e0       	ldi	r20, 0x04	; 4
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	06 c0       	rjmp	.+12     	; 0x1c28 <vfprintf+0x29c>
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	42 e0       	ldi	r20, 0x02	; 2
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	a4 0e       	add	r10, r20
    1c2a:	b5 1e       	adc	r11, r21
    1c2c:	a2 01       	movw	r20, r4
    1c2e:	0e 94 26 11 	call	0x224c	; 0x224c <__ultoa_invert>
    1c32:	d8 2e       	mov	r13, r24
    1c34:	d4 18       	sub	r13, r4
    1c36:	01 2f       	mov	r16, r17
    1c38:	0f 77       	andi	r16, 0x7F	; 127
    1c3a:	06 ff       	sbrs	r16, 6
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <vfprintf+0x2c4>
    1c3e:	0e 7f       	andi	r16, 0xFE	; 254
    1c40:	df 14       	cp	r13, r15
    1c42:	30 f4       	brcc	.+12     	; 0x1c50 <vfprintf+0x2c4>
    1c44:	04 ff       	sbrs	r16, 4
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <vfprintf+0x2c8>
    1c48:	02 fd       	sbrc	r16, 2
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <vfprintf+0x2c8>
    1c4c:	0f 7e       	andi	r16, 0xEF	; 239
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <vfprintf+0x2c8>
    1c50:	1d 2d       	mov	r17, r13
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <vfprintf+0x2ca>
    1c54:	1f 2d       	mov	r17, r15
    1c56:	80 2f       	mov	r24, r16
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	04 ff       	sbrs	r16, 4
    1c5c:	0c c0       	rjmp	.+24     	; 0x1c76 <vfprintf+0x2ea>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ed 0d       	add	r30, r13
    1c62:	f1 1d       	adc	r31, r1
    1c64:	20 81       	ld	r18, Z
    1c66:	20 33       	cpi	r18, 0x30	; 48
    1c68:	11 f4       	brne	.+4      	; 0x1c6e <vfprintf+0x2e2>
    1c6a:	09 7e       	andi	r16, 0xE9	; 233
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <vfprintf+0x2f4>
    1c6e:	02 ff       	sbrs	r16, 2
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <vfprintf+0x2f2>
    1c72:	1e 5f       	subi	r17, 0xFE	; 254
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <vfprintf+0x2f4>
    1c76:	86 78       	andi	r24, 0x86	; 134
    1c78:	90 70       	andi	r25, 0x00	; 0
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <vfprintf+0x2f4>
    1c7e:	1f 5f       	subi	r17, 0xFF	; 255
    1c80:	80 2e       	mov	r8, r16
    1c82:	99 24       	eor	r9, r9
    1c84:	03 fd       	sbrc	r16, 3
    1c86:	12 c0       	rjmp	.+36     	; 0x1cac <vfprintf+0x320>
    1c88:	00 ff       	sbrs	r16, 0
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <vfprintf+0x31a>
    1c8c:	fd 2c       	mov	r15, r13
    1c8e:	1e 15       	cp	r17, r14
    1c90:	50 f4       	brcc	.+20     	; 0x1ca6 <vfprintf+0x31a>
    1c92:	fe 0c       	add	r15, r14
    1c94:	f1 1a       	sub	r15, r17
    1c96:	1e 2d       	mov	r17, r14
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x31a>
    1c9a:	80 e2       	ldi	r24, 0x20	; 32
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	b3 01       	movw	r22, r6
    1ca0:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1ca4:	1f 5f       	subi	r17, 0xFF	; 255
    1ca6:	1e 15       	cp	r17, r14
    1ca8:	c0 f3       	brcs	.-16     	; 0x1c9a <vfprintf+0x30e>
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <vfprintf+0x328>
    1cac:	1e 15       	cp	r17, r14
    1cae:	10 f4       	brcc	.+4      	; 0x1cb4 <vfprintf+0x328>
    1cb0:	e1 1a       	sub	r14, r17
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <vfprintf+0x32a>
    1cb4:	ee 24       	eor	r14, r14
    1cb6:	84 fe       	sbrs	r8, 4
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <vfprintf+0x34c>
    1cba:	80 e3       	ldi	r24, 0x30	; 48
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	b3 01       	movw	r22, r6
    1cc0:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1cc4:	82 fe       	sbrs	r8, 2
    1cc6:	1f c0       	rjmp	.+62     	; 0x1d06 <vfprintf+0x37a>
    1cc8:	81 fe       	sbrs	r8, 1
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <vfprintf+0x346>
    1ccc:	88 e5       	ldi	r24, 0x58	; 88
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	10 c0       	rjmp	.+32     	; 0x1cf2 <vfprintf+0x366>
    1cd2:	88 e7       	ldi	r24, 0x78	; 120
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0d c0       	rjmp	.+26     	; 0x1cf2 <vfprintf+0x366>
    1cd8:	c4 01       	movw	r24, r8
    1cda:	86 78       	andi	r24, 0x86	; 134
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	91 f0       	breq	.+36     	; 0x1d06 <vfprintf+0x37a>
    1ce2:	81 fc       	sbrc	r8, 1
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0x35e>
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <vfprintf+0x360>
    1cea:	8b e2       	ldi	r24, 0x2B	; 43
    1cec:	07 fd       	sbrc	r16, 7
    1cee:	8d e2       	ldi	r24, 0x2D	; 45
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1cf8:	06 c0       	rjmp	.+12     	; 0x1d06 <vfprintf+0x37a>
    1cfa:	80 e3       	ldi	r24, 0x30	; 48
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	b3 01       	movw	r22, r6
    1d00:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1d04:	fa 94       	dec	r15
    1d06:	df 14       	cp	r13, r15
    1d08:	c0 f3       	brcs	.-16     	; 0x1cfa <vfprintf+0x36e>
    1d0a:	da 94       	dec	r13
    1d0c:	f2 01       	movw	r30, r4
    1d0e:	ed 0d       	add	r30, r13
    1d10:	f1 1d       	adc	r31, r1
    1d12:	80 81       	ld	r24, Z
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	b3 01       	movw	r22, r6
    1d18:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1d1c:	dd 20       	and	r13, r13
    1d1e:	a9 f7       	brne	.-22     	; 0x1d0a <vfprintf+0x37e>
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0x3a2>
    1d22:	80 e2       	ldi	r24, 0x20	; 32
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	b3 01       	movw	r22, r6
    1d28:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <fputc>
    1d2c:	ea 94       	dec	r14
    1d2e:	ee 20       	and	r14, r14
    1d30:	c1 f7       	brne	.-16     	; 0x1d22 <vfprintf+0x396>
    1d32:	40 ce       	rjmp	.-896    	; 0x19b4 <vfprintf+0x28>
    1d34:	f3 01       	movw	r30, r6
    1d36:	86 81       	ldd	r24, Z+6	; 0x06
    1d38:	97 81       	ldd	r25, Z+7	; 0x07
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <vfprintf+0x3b4>
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	9f ef       	ldi	r25, 0xFF	; 255
    1d40:	2d 96       	adiw	r28, 0x0d	; 13
    1d42:	e2 e1       	ldi	r30, 0x12	; 18
    1d44:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__>

00001d48 <dtoa_prf>:
    1d48:	a9 e0       	ldi	r26, 0x09	; 9
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ea ea       	ldi	r30, 0xAA	; 170
    1d4e:	fe e0       	ldi	r31, 0x0E	; 14
    1d50:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__prologue_saves__+0x8>
    1d54:	6a 01       	movw	r12, r20
    1d56:	12 2f       	mov	r17, r18
    1d58:	f0 2e       	mov	r15, r16
    1d5a:	2b e3       	ldi	r18, 0x3B	; 59
    1d5c:	20 17       	cp	r18, r16
    1d5e:	18 f0       	brcs	.+6      	; 0x1d66 <dtoa_prf+0x1e>
    1d60:	b0 2e       	mov	r11, r16
    1d62:	b3 94       	inc	r11
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <dtoa_prf+0x22>
    1d66:	3c e3       	ldi	r19, 0x3C	; 60
    1d68:	b3 2e       	mov	r11, r19
    1d6a:	ae 01       	movw	r20, r28
    1d6c:	4f 5f       	subi	r20, 0xFF	; 255
    1d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d70:	27 e0       	ldi	r18, 0x07	; 7
    1d72:	0b 2d       	mov	r16, r11
    1d74:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__ftoa_engine>
    1d78:	bc 01       	movw	r22, r24
    1d7a:	a9 81       	ldd	r26, Y+1	; 0x01
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	cd 01       	movw	r24, r26
    1d80:	89 70       	andi	r24, 0x09	; 9
    1d82:	90 70       	andi	r25, 0x00	; 0
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	91 05       	cpc	r25, r1
    1d88:	31 f0       	breq	.+12     	; 0x1d96 <dtoa_prf+0x4e>
    1d8a:	e1 fc       	sbrc	r14, 1
    1d8c:	06 c0       	rjmp	.+12     	; 0x1d9a <dtoa_prf+0x52>
    1d8e:	e0 fe       	sbrs	r14, 0
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <dtoa_prf+0x56>
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <dtoa_prf+0x58>
    1d96:	4d e2       	ldi	r20, 0x2D	; 45
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <dtoa_prf+0x58>
    1d9a:	4b e2       	ldi	r20, 0x2B	; 43
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <dtoa_prf+0x58>
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	a3 ff       	sbrs	r26, 3
    1da2:	36 c0       	rjmp	.+108    	; 0x1e10 <dtoa_prf+0xc8>
    1da4:	44 23       	and	r20, r20
    1da6:	11 f0       	breq	.+4      	; 0x1dac <dtoa_prf+0x64>
    1da8:	84 e0       	ldi	r24, 0x04	; 4
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <dtoa_prf+0x66>
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	81 17       	cp	r24, r17
    1db0:	10 f4       	brcc	.+4      	; 0x1db6 <dtoa_prf+0x6e>
    1db2:	18 1b       	sub	r17, r24
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <dtoa_prf+0x70>
    1db6:	10 e0       	ldi	r17, 0x00	; 0
    1db8:	e4 fc       	sbrc	r14, 4
    1dba:	0b c0       	rjmp	.+22     	; 0x1dd2 <dtoa_prf+0x8a>
    1dbc:	91 2f       	mov	r25, r17
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <dtoa_prf+0x80>
    1dc4:	81 93       	st	Z+, r24
    1dc6:	91 50       	subi	r25, 0x01	; 1
    1dc8:	99 23       	and	r25, r25
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <dtoa_prf+0x7c>
    1dcc:	c1 0e       	add	r12, r17
    1dce:	d1 1c       	adc	r13, r1
    1dd0:	10 e0       	ldi	r17, 0x00	; 0
    1dd2:	44 23       	and	r20, r20
    1dd4:	19 f0       	breq	.+6      	; 0x1ddc <dtoa_prf+0x94>
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	41 93       	st	Z+, r20
    1dda:	6f 01       	movw	r12, r30
    1ddc:	e2 fe       	sbrs	r14, 2
    1dde:	05 c0       	rjmp	.+10     	; 0x1dea <dtoa_prf+0xa2>
    1de0:	8e e4       	ldi	r24, 0x4E	; 78
    1de2:	f6 01       	movw	r30, r12
    1de4:	80 83       	st	Z, r24
    1de6:	91 e4       	ldi	r25, 0x41	; 65
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <dtoa_prf+0xaa>
    1dea:	8e e6       	ldi	r24, 0x6E	; 110
    1dec:	f6 01       	movw	r30, r12
    1dee:	80 83       	st	Z, r24
    1df0:	91 e6       	ldi	r25, 0x61	; 97
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	82 83       	std	Z+2, r24	; 0x02
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	c8 0e       	add	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	81 2f       	mov	r24, r17
    1e00:	f6 01       	movw	r30, r12
    1e02:	90 e2       	ldi	r25, 0x20	; 32
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <dtoa_prf+0xc2>
    1e06:	91 93       	st	Z+, r25
    1e08:	81 50       	subi	r24, 0x01	; 1
    1e0a:	88 23       	and	r24, r24
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <dtoa_prf+0xbe>
    1e0e:	3a c0       	rjmp	.+116    	; 0x1e84 <dtoa_prf+0x13c>
    1e10:	a2 ff       	sbrs	r26, 2
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <dtoa_prf+0x14a>
    1e14:	44 23       	and	r20, r20
    1e16:	11 f0       	breq	.+4      	; 0x1e1c <dtoa_prf+0xd4>
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <dtoa_prf+0xd6>
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	81 17       	cp	r24, r17
    1e20:	10 f4       	brcc	.+4      	; 0x1e26 <dtoa_prf+0xde>
    1e22:	18 1b       	sub	r17, r24
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <dtoa_prf+0xe0>
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	e4 fc       	sbrc	r14, 4
    1e2a:	0b c0       	rjmp	.+22     	; 0x1e42 <dtoa_prf+0xfa>
    1e2c:	91 2f       	mov	r25, r17
    1e2e:	f6 01       	movw	r30, r12
    1e30:	80 e2       	ldi	r24, 0x20	; 32
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <dtoa_prf+0xf0>
    1e34:	81 93       	st	Z+, r24
    1e36:	91 50       	subi	r25, 0x01	; 1
    1e38:	99 23       	and	r25, r25
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <dtoa_prf+0xec>
    1e3c:	c1 0e       	add	r12, r17
    1e3e:	d1 1c       	adc	r13, r1
    1e40:	10 e0       	ldi	r17, 0x00	; 0
    1e42:	44 23       	and	r20, r20
    1e44:	19 f0       	breq	.+6      	; 0x1e4c <dtoa_prf+0x104>
    1e46:	f6 01       	movw	r30, r12
    1e48:	41 93       	st	Z+, r20
    1e4a:	6f 01       	movw	r12, r30
    1e4c:	e2 fe       	sbrs	r14, 2
    1e4e:	07 c0       	rjmp	.+14     	; 0x1e5e <dtoa_prf+0x116>
    1e50:	89 e4       	ldi	r24, 0x49	; 73
    1e52:	f6 01       	movw	r30, r12
    1e54:	80 83       	st	Z, r24
    1e56:	8e e4       	ldi	r24, 0x4E	; 78
    1e58:	81 83       	std	Z+1, r24	; 0x01
    1e5a:	86 e4       	ldi	r24, 0x46	; 70
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <dtoa_prf+0x122>
    1e5e:	89 e6       	ldi	r24, 0x69	; 105
    1e60:	f6 01       	movw	r30, r12
    1e62:	80 83       	st	Z, r24
    1e64:	8e e6       	ldi	r24, 0x6E	; 110
    1e66:	81 83       	std	Z+1, r24	; 0x01
    1e68:	86 e6       	ldi	r24, 0x66	; 102
    1e6a:	82 83       	std	Z+2, r24	; 0x02
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	c8 0e       	add	r12, r24
    1e72:	d9 1e       	adc	r13, r25
    1e74:	81 2f       	mov	r24, r17
    1e76:	f6 01       	movw	r30, r12
    1e78:	90 e2       	ldi	r25, 0x20	; 32
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <dtoa_prf+0x138>
    1e7c:	91 93       	st	Z+, r25
    1e7e:	81 50       	subi	r24, 0x01	; 1
    1e80:	88 23       	and	r24, r24
    1e82:	e1 f7       	brne	.-8      	; 0x1e7c <dtoa_prf+0x134>
    1e84:	c1 0e       	add	r12, r17
    1e86:	d1 1c       	adc	r13, r1
    1e88:	f6 01       	movw	r30, r12
    1e8a:	10 82       	st	Z, r1
    1e8c:	8e ef       	ldi	r24, 0xFE	; 254
    1e8e:	9f ef       	ldi	r25, 0xFF	; 255
    1e90:	af c0       	rjmp	.+350    	; 0x1ff0 <dtoa_prf+0x2a8>
    1e92:	21 e0       	ldi	r18, 0x01	; 1
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	44 23       	and	r20, r20
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <dtoa_prf+0x156>
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	16 16       	cp	r1, r22
    1ea0:	17 06       	cpc	r1, r23
    1ea2:	1c f4       	brge	.+6      	; 0x1eaa <dtoa_prf+0x162>
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <dtoa_prf+0x166>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	28 0f       	add	r18, r24
    1eb0:	39 1f       	adc	r19, r25
    1eb2:	ff 20       	and	r15, r15
    1eb4:	21 f0       	breq	.+8      	; 0x1ebe <dtoa_prf+0x176>
    1eb6:	8f 2d       	mov	r24, r15
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <dtoa_prf+0x17a>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	82 0f       	add	r24, r18
    1ec4:	93 1f       	adc	r25, r19
    1ec6:	21 2f       	mov	r18, r17
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	82 17       	cp	r24, r18
    1ecc:	93 07       	cpc	r25, r19
    1ece:	1c f4       	brge	.+6      	; 0x1ed6 <dtoa_prf+0x18e>
    1ed0:	51 2f       	mov	r21, r17
    1ed2:	58 1b       	sub	r21, r24
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <dtoa_prf+0x190>
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	8e 2d       	mov	r24, r14
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9c 01       	movw	r18, r24
    1ede:	20 71       	andi	r18, 0x10	; 16
    1ee0:	30 70       	andi	r19, 0x00	; 0
    1ee2:	e4 fc       	sbrc	r14, 4
    1ee4:	0d c0       	rjmp	.+26     	; 0x1f00 <dtoa_prf+0x1b8>
    1ee6:	e3 fc       	sbrc	r14, 3
    1ee8:	0b c0       	rjmp	.+22     	; 0x1f00 <dtoa_prf+0x1b8>
    1eea:	85 2f       	mov	r24, r21
    1eec:	f6 01       	movw	r30, r12
    1eee:	90 e2       	ldi	r25, 0x20	; 32
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <dtoa_prf+0x1ae>
    1ef2:	91 93       	st	Z+, r25
    1ef4:	81 50       	subi	r24, 0x01	; 1
    1ef6:	88 23       	and	r24, r24
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <dtoa_prf+0x1aa>
    1efa:	c5 0e       	add	r12, r21
    1efc:	d1 1c       	adc	r13, r1
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	44 23       	and	r20, r20
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <dtoa_prf+0x1c2>
    1f04:	f6 01       	movw	r30, r12
    1f06:	41 93       	st	Z+, r20
    1f08:	6f 01       	movw	r12, r30
    1f0a:	21 15       	cp	r18, r1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	59 f4       	brne	.+22     	; 0x1f26 <dtoa_prf+0x1de>
    1f10:	85 2f       	mov	r24, r21
    1f12:	f6 01       	movw	r30, r12
    1f14:	90 e3       	ldi	r25, 0x30	; 48
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <dtoa_prf+0x1d4>
    1f18:	91 93       	st	Z+, r25
    1f1a:	81 50       	subi	r24, 0x01	; 1
    1f1c:	88 23       	and	r24, r24
    1f1e:	e1 f7       	brne	.-8      	; 0x1f18 <dtoa_prf+0x1d0>
    1f20:	c5 0e       	add	r12, r21
    1f22:	d1 1c       	adc	r13, r1
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	b6 0e       	add	r11, r22
    1f28:	4a 81       	ldd	r20, Y+2	; 0x02
    1f2a:	20 e1       	ldi	r18, 0x10	; 16
    1f2c:	62 2e       	mov	r6, r18
    1f2e:	71 2c       	mov	r7, r1
    1f30:	6a 22       	and	r6, r26
    1f32:	7b 22       	and	r7, r27
    1f34:	a4 ff       	sbrs	r26, 4
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <dtoa_prf+0x1f6>
    1f38:	41 33       	cpi	r20, 0x31	; 49
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <dtoa_prf+0x1f6>
    1f3c:	ba 94       	dec	r11
    1f3e:	1b 14       	cp	r1, r11
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <dtoa_prf+0x204>
    1f42:	8b 2d       	mov	r24, r11
    1f44:	89 30       	cpi	r24, 0x09	; 9
    1f46:	18 f0       	brcs	.+6      	; 0x1f4e <dtoa_prf+0x206>
    1f48:	88 e0       	ldi	r24, 0x08	; 8
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <dtoa_prf+0x206>
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	9b 01       	movw	r18, r22
    1f50:	77 ff       	sbrs	r23, 7
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <dtoa_prf+0x210>
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	9e e2       	ldi	r25, 0x2E	; 46
    1f5e:	e9 2e       	mov	r14, r25
    1f60:	4b 01       	movw	r8, r22
    1f62:	88 1a       	sub	r8, r24
    1f64:	91 08       	sbc	r9, r1
    1f66:	cb 01       	movw	r24, r22
    1f68:	82 1b       	sub	r24, r18
    1f6a:	93 0b       	sbc	r25, r19
    1f6c:	8e 01       	movw	r16, r28
    1f6e:	0f 5f       	subi	r16, 0xFF	; 255
    1f70:	1f 4f       	sbci	r17, 0xFF	; 255
    1f72:	08 0f       	add	r16, r24
    1f74:	19 1f       	adc	r17, r25
    1f76:	8f 2d       	mov	r24, r15
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	aa 24       	eor	r10, r10
    1f7c:	bb 24       	eor	r11, r11
    1f7e:	a8 1a       	sub	r10, r24
    1f80:	b9 0a       	sbc	r11, r25
    1f82:	ff ef       	ldi	r31, 0xFF	; 255
    1f84:	2f 3f       	cpi	r18, 0xFF	; 255
    1f86:	3f 07       	cpc	r19, r31
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <dtoa_prf+0x248>
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	e1 92       	st	Z+, r14
    1f8e:	6f 01       	movw	r12, r30
    1f90:	62 17       	cp	r22, r18
    1f92:	73 07       	cpc	r23, r19
    1f94:	44 f0       	brlt	.+16     	; 0x1fa6 <dtoa_prf+0x25e>
    1f96:	82 16       	cp	r8, r18
    1f98:	93 06       	cpc	r9, r19
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <dtoa_prf+0x25e>
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	ea 0f       	add	r30, r26
    1fa0:	fb 1f       	adc	r31, r27
    1fa2:	81 81       	ldd	r24, Z+1	; 0x01
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <dtoa_prf+0x260>
    1fa6:	80 e3       	ldi	r24, 0x30	; 48
    1fa8:	21 50       	subi	r18, 0x01	; 1
    1faa:	30 40       	sbci	r19, 0x00	; 0
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	2a 15       	cp	r18, r10
    1fb0:	3b 05       	cpc	r19, r11
    1fb2:	24 f0       	brlt	.+8      	; 0x1fbc <dtoa_prf+0x274>
    1fb4:	f6 01       	movw	r30, r12
    1fb6:	81 93       	st	Z+, r24
    1fb8:	6f 01       	movw	r12, r30
    1fba:	e3 cf       	rjmp	.-58     	; 0x1f82 <dtoa_prf+0x23a>
    1fbc:	26 17       	cp	r18, r22
    1fbe:	37 07       	cpc	r19, r23
    1fc0:	41 f4       	brne	.+16     	; 0x1fd2 <dtoa_prf+0x28a>
    1fc2:	46 33       	cpi	r20, 0x36	; 54
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <dtoa_prf+0x288>
    1fc6:	45 33       	cpi	r20, 0x35	; 53
    1fc8:	21 f4       	brne	.+8      	; 0x1fd2 <dtoa_prf+0x28a>
    1fca:	61 14       	cp	r6, r1
    1fcc:	71 04       	cpc	r7, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <dtoa_prf+0x28a>
    1fd0:	81 e3       	ldi	r24, 0x31	; 49
    1fd2:	f6 01       	movw	r30, r12
    1fd4:	81 93       	st	Z+, r24
    1fd6:	85 2f       	mov	r24, r21
    1fd8:	df 01       	movw	r26, r30
    1fda:	90 e2       	ldi	r25, 0x20	; 32
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <dtoa_prf+0x29a>
    1fde:	9d 93       	st	X+, r25
    1fe0:	81 50       	subi	r24, 0x01	; 1
    1fe2:	88 23       	and	r24, r24
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <dtoa_prf+0x296>
    1fe6:	e5 0f       	add	r30, r21
    1fe8:	f1 1d       	adc	r31, r1
    1fea:	10 82       	st	Z, r1
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	29 96       	adiw	r28, 0x09	; 9
    1ff2:	ee e0       	ldi	r30, 0x0E	; 14
    1ff4:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__epilogue_restores__+0x8>

00001ff8 <__ftoa_engine>:
    1ff8:	28 30       	cpi	r18, 0x08	; 8
    1ffa:	08 f0       	brcs	.+2      	; 0x1ffe <__ftoa_engine+0x6>
    1ffc:	27 e0       	ldi	r18, 0x07	; 7
    1ffe:	33 27       	eor	r19, r19
    2000:	da 01       	movw	r26, r20
    2002:	99 0f       	add	r25, r25
    2004:	31 1d       	adc	r19, r1
    2006:	87 fd       	sbrc	r24, 7
    2008:	91 60       	ori	r25, 0x01	; 1
    200a:	00 96       	adiw	r24, 0x00	; 0
    200c:	61 05       	cpc	r22, r1
    200e:	71 05       	cpc	r23, r1
    2010:	39 f4       	brne	.+14     	; 0x2020 <__ftoa_engine+0x28>
    2012:	32 60       	ori	r19, 0x02	; 2
    2014:	2e 5f       	subi	r18, 0xFE	; 254
    2016:	3d 93       	st	X+, r19
    2018:	30 e3       	ldi	r19, 0x30	; 48
    201a:	2a 95       	dec	r18
    201c:	e1 f7       	brne	.-8      	; 0x2016 <__ftoa_engine+0x1e>
    201e:	08 95       	ret
    2020:	9f 3f       	cpi	r25, 0xFF	; 255
    2022:	30 f0       	brcs	.+12     	; 0x2030 <__ftoa_engine+0x38>
    2024:	80 38       	cpi	r24, 0x80	; 128
    2026:	71 05       	cpc	r23, r1
    2028:	61 05       	cpc	r22, r1
    202a:	09 f0       	breq	.+2      	; 0x202e <__ftoa_engine+0x36>
    202c:	3c 5f       	subi	r19, 0xFC	; 252
    202e:	3c 5f       	subi	r19, 0xFC	; 252
    2030:	3d 93       	st	X+, r19
    2032:	91 30       	cpi	r25, 0x01	; 1
    2034:	08 f0       	brcs	.+2      	; 0x2038 <__ftoa_engine+0x40>
    2036:	80 68       	ori	r24, 0x80	; 128
    2038:	91 1d       	adc	r25, r1
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	1f 93       	push	r17
    2040:	0f 93       	push	r16
    2042:	ff 92       	push	r15
    2044:	ef 92       	push	r14
    2046:	19 2f       	mov	r17, r25
    2048:	98 7f       	andi	r25, 0xF8	; 248
    204a:	96 95       	lsr	r25
    204c:	e9 2f       	mov	r30, r25
    204e:	96 95       	lsr	r25
    2050:	96 95       	lsr	r25
    2052:	e9 0f       	add	r30, r25
    2054:	ff 27       	eor	r31, r31
    2056:	e2 55       	subi	r30, 0x52	; 82
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	99 27       	eor	r25, r25
    205c:	33 27       	eor	r19, r19
    205e:	ee 24       	eor	r14, r14
    2060:	ff 24       	eor	r15, r15
    2062:	a7 01       	movw	r20, r14
    2064:	e7 01       	movw	r28, r14
    2066:	05 90       	lpm	r0, Z+
    2068:	08 94       	sec
    206a:	07 94       	ror	r0
    206c:	28 f4       	brcc	.+10     	; 0x2078 <__ftoa_engine+0x80>
    206e:	36 0f       	add	r19, r22
    2070:	e7 1e       	adc	r14, r23
    2072:	f8 1e       	adc	r15, r24
    2074:	49 1f       	adc	r20, r25
    2076:	51 1d       	adc	r21, r1
    2078:	66 0f       	add	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	06 94       	lsr	r0
    2082:	a1 f7       	brne	.-24     	; 0x206c <__ftoa_engine+0x74>
    2084:	05 90       	lpm	r0, Z+
    2086:	07 94       	ror	r0
    2088:	28 f4       	brcc	.+10     	; 0x2094 <__ftoa_engine+0x9c>
    208a:	e7 0e       	add	r14, r23
    208c:	f8 1e       	adc	r15, r24
    208e:	49 1f       	adc	r20, r25
    2090:	56 1f       	adc	r21, r22
    2092:	c1 1d       	adc	r28, r1
    2094:	77 0f       	add	r23, r23
    2096:	88 1f       	adc	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	66 1f       	adc	r22, r22
    209c:	06 94       	lsr	r0
    209e:	a1 f7       	brne	.-24     	; 0x2088 <__ftoa_engine+0x90>
    20a0:	05 90       	lpm	r0, Z+
    20a2:	07 94       	ror	r0
    20a4:	28 f4       	brcc	.+10     	; 0x20b0 <__ftoa_engine+0xb8>
    20a6:	f8 0e       	add	r15, r24
    20a8:	49 1f       	adc	r20, r25
    20aa:	56 1f       	adc	r21, r22
    20ac:	c7 1f       	adc	r28, r23
    20ae:	d1 1d       	adc	r29, r1
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	66 1f       	adc	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	06 94       	lsr	r0
    20ba:	a1 f7       	brne	.-24     	; 0x20a4 <__ftoa_engine+0xac>
    20bc:	05 90       	lpm	r0, Z+
    20be:	07 94       	ror	r0
    20c0:	20 f4       	brcc	.+8      	; 0x20ca <__ftoa_engine+0xd2>
    20c2:	49 0f       	add	r20, r25
    20c4:	56 1f       	adc	r21, r22
    20c6:	c7 1f       	adc	r28, r23
    20c8:	d8 1f       	adc	r29, r24
    20ca:	99 0f       	add	r25, r25
    20cc:	66 1f       	adc	r22, r22
    20ce:	77 1f       	adc	r23, r23
    20d0:	88 1f       	adc	r24, r24
    20d2:	06 94       	lsr	r0
    20d4:	a9 f7       	brne	.-22     	; 0x20c0 <__ftoa_engine+0xc8>
    20d6:	84 91       	lpm	r24, Z
    20d8:	10 95       	com	r17
    20da:	17 70       	andi	r17, 0x07	; 7
    20dc:	41 f0       	breq	.+16     	; 0x20ee <__ftoa_engine+0xf6>
    20de:	d6 95       	lsr	r29
    20e0:	c7 95       	ror	r28
    20e2:	57 95       	ror	r21
    20e4:	47 95       	ror	r20
    20e6:	f7 94       	ror	r15
    20e8:	e7 94       	ror	r14
    20ea:	1a 95       	dec	r17
    20ec:	c1 f7       	brne	.-16     	; 0x20de <__ftoa_engine+0xe6>
    20ee:	e4 e5       	ldi	r30, 0x54	; 84
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	68 94       	set
    20f4:	15 90       	lpm	r1, Z+
    20f6:	15 91       	lpm	r17, Z+
    20f8:	35 91       	lpm	r19, Z+
    20fa:	65 91       	lpm	r22, Z+
    20fc:	95 91       	lpm	r25, Z+
    20fe:	05 90       	lpm	r0, Z+
    2100:	7f e2       	ldi	r23, 0x2F	; 47
    2102:	73 95       	inc	r23
    2104:	e1 18       	sub	r14, r1
    2106:	f1 0a       	sbc	r15, r17
    2108:	43 0b       	sbc	r20, r19
    210a:	56 0b       	sbc	r21, r22
    210c:	c9 0b       	sbc	r28, r25
    210e:	d0 09       	sbc	r29, r0
    2110:	c0 f7       	brcc	.-16     	; 0x2102 <__ftoa_engine+0x10a>
    2112:	e1 0c       	add	r14, r1
    2114:	f1 1e       	adc	r15, r17
    2116:	43 1f       	adc	r20, r19
    2118:	56 1f       	adc	r21, r22
    211a:	c9 1f       	adc	r28, r25
    211c:	d0 1d       	adc	r29, r0
    211e:	7e f4       	brtc	.+30     	; 0x213e <__ftoa_engine+0x146>
    2120:	70 33       	cpi	r23, 0x30	; 48
    2122:	11 f4       	brne	.+4      	; 0x2128 <__ftoa_engine+0x130>
    2124:	8a 95       	dec	r24
    2126:	e6 cf       	rjmp	.-52     	; 0x20f4 <__ftoa_engine+0xfc>
    2128:	e8 94       	clt
    212a:	01 50       	subi	r16, 0x01	; 1
    212c:	30 f0       	brcs	.+12     	; 0x213a <__ftoa_engine+0x142>
    212e:	08 0f       	add	r16, r24
    2130:	0a f4       	brpl	.+2      	; 0x2134 <__ftoa_engine+0x13c>
    2132:	00 27       	eor	r16, r16
    2134:	02 17       	cp	r16, r18
    2136:	08 f4       	brcc	.+2      	; 0x213a <__ftoa_engine+0x142>
    2138:	20 2f       	mov	r18, r16
    213a:	23 95       	inc	r18
    213c:	02 2f       	mov	r16, r18
    213e:	7a 33       	cpi	r23, 0x3A	; 58
    2140:	28 f0       	brcs	.+10     	; 0x214c <__ftoa_engine+0x154>
    2142:	79 e3       	ldi	r23, 0x39	; 57
    2144:	7d 93       	st	X+, r23
    2146:	2a 95       	dec	r18
    2148:	e9 f7       	brne	.-6      	; 0x2144 <__ftoa_engine+0x14c>
    214a:	10 c0       	rjmp	.+32     	; 0x216c <__ftoa_engine+0x174>
    214c:	7d 93       	st	X+, r23
    214e:	2a 95       	dec	r18
    2150:	89 f6       	brne	.-94     	; 0x20f4 <__ftoa_engine+0xfc>
    2152:	06 94       	lsr	r0
    2154:	97 95       	ror	r25
    2156:	67 95       	ror	r22
    2158:	37 95       	ror	r19
    215a:	17 95       	ror	r17
    215c:	17 94       	ror	r1
    215e:	e1 18       	sub	r14, r1
    2160:	f1 0a       	sbc	r15, r17
    2162:	43 0b       	sbc	r20, r19
    2164:	56 0b       	sbc	r21, r22
    2166:	c9 0b       	sbc	r28, r25
    2168:	d0 09       	sbc	r29, r0
    216a:	98 f0       	brcs	.+38     	; 0x2192 <__ftoa_engine+0x19a>
    216c:	23 95       	inc	r18
    216e:	7e 91       	ld	r23, -X
    2170:	73 95       	inc	r23
    2172:	7a 33       	cpi	r23, 0x3A	; 58
    2174:	08 f0       	brcs	.+2      	; 0x2178 <__ftoa_engine+0x180>
    2176:	70 e3       	ldi	r23, 0x30	; 48
    2178:	7c 93       	st	X, r23
    217a:	20 13       	cpse	r18, r16
    217c:	b8 f7       	brcc	.-18     	; 0x216c <__ftoa_engine+0x174>
    217e:	7e 91       	ld	r23, -X
    2180:	70 61       	ori	r23, 0x10	; 16
    2182:	7d 93       	st	X+, r23
    2184:	30 f0       	brcs	.+12     	; 0x2192 <__ftoa_engine+0x19a>
    2186:	83 95       	inc	r24
    2188:	71 e3       	ldi	r23, 0x31	; 49
    218a:	7d 93       	st	X+, r23
    218c:	70 e3       	ldi	r23, 0x30	; 48
    218e:	2a 95       	dec	r18
    2190:	e1 f7       	brne	.-8      	; 0x218a <__ftoa_engine+0x192>
    2192:	11 24       	eor	r1, r1
    2194:	ef 90       	pop	r14
    2196:	ff 90       	pop	r15
    2198:	0f 91       	pop	r16
    219a:	1f 91       	pop	r17
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	99 27       	eor	r25, r25
    21a2:	87 fd       	sbrc	r24, 7
    21a4:	90 95       	com	r25
    21a6:	08 95       	ret

000021a8 <strnlen_P>:
    21a8:	fc 01       	movw	r30, r24
    21aa:	05 90       	lpm	r0, Z+
    21ac:	61 50       	subi	r22, 0x01	; 1
    21ae:	70 40       	sbci	r23, 0x00	; 0
    21b0:	01 10       	cpse	r0, r1
    21b2:	d8 f7       	brcc	.-10     	; 0x21aa <strnlen_P+0x2>
    21b4:	80 95       	com	r24
    21b6:	90 95       	com	r25
    21b8:	8e 0f       	add	r24, r30
    21ba:	9f 1f       	adc	r25, r31
    21bc:	08 95       	ret

000021be <strnlen>:
    21be:	fc 01       	movw	r30, r24
    21c0:	61 50       	subi	r22, 0x01	; 1
    21c2:	70 40       	sbci	r23, 0x00	; 0
    21c4:	01 90       	ld	r0, Z+
    21c6:	01 10       	cpse	r0, r1
    21c8:	d8 f7       	brcc	.-10     	; 0x21c0 <strnlen+0x2>
    21ca:	80 95       	com	r24
    21cc:	90 95       	com	r25
    21ce:	8e 0f       	add	r24, r30
    21d0:	9f 1f       	adc	r25, r31
    21d2:	08 95       	ret

000021d4 <strrev>:
    21d4:	dc 01       	movw	r26, r24
    21d6:	fc 01       	movw	r30, r24
    21d8:	67 2f       	mov	r22, r23
    21da:	71 91       	ld	r23, Z+
    21dc:	77 23       	and	r23, r23
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <strrev+0x4>
    21e0:	32 97       	sbiw	r30, 0x02	; 2
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <strrev+0x18>
    21e4:	7c 91       	ld	r23, X
    21e6:	6d 93       	st	X+, r22
    21e8:	70 83       	st	Z, r23
    21ea:	62 91       	ld	r22, -Z
    21ec:	ae 17       	cp	r26, r30
    21ee:	bf 07       	cpc	r27, r31
    21f0:	c8 f3       	brcs	.-14     	; 0x21e4 <strrev+0x10>
    21f2:	08 95       	ret

000021f4 <fputc>:
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	8c 01       	movw	r16, r24
    21fe:	eb 01       	movw	r28, r22
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	81 ff       	sbrs	r24, 1
    2204:	1b c0       	rjmp	.+54     	; 0x223c <fputc+0x48>
    2206:	82 ff       	sbrs	r24, 2
    2208:	0d c0       	rjmp	.+26     	; 0x2224 <fputc+0x30>
    220a:	2e 81       	ldd	r18, Y+6	; 0x06
    220c:	3f 81       	ldd	r19, Y+7	; 0x07
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	9d 81       	ldd	r25, Y+5	; 0x05
    2212:	28 17       	cp	r18, r24
    2214:	39 07       	cpc	r19, r25
    2216:	64 f4       	brge	.+24     	; 0x2230 <fputc+0x3c>
    2218:	e8 81       	ld	r30, Y
    221a:	f9 81       	ldd	r31, Y+1	; 0x01
    221c:	01 93       	st	Z+, r16
    221e:	f9 83       	std	Y+1, r31	; 0x01
    2220:	e8 83       	st	Y, r30
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <fputc+0x3c>
    2224:	e8 85       	ldd	r30, Y+8	; 0x08
    2226:	f9 85       	ldd	r31, Y+9	; 0x09
    2228:	80 2f       	mov	r24, r16
    222a:	09 95       	icall
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	31 f4       	brne	.+12     	; 0x223c <fputc+0x48>
    2230:	8e 81       	ldd	r24, Y+6	; 0x06
    2232:	9f 81       	ldd	r25, Y+7	; 0x07
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	9f 83       	std	Y+7, r25	; 0x07
    2238:	8e 83       	std	Y+6, r24	; 0x06
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <fputc+0x4c>
    223c:	0f ef       	ldi	r16, 0xFF	; 255
    223e:	1f ef       	ldi	r17, 0xFF	; 255
    2240:	c8 01       	movw	r24, r16
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <__ultoa_invert>:
    224c:	fa 01       	movw	r30, r20
    224e:	aa 27       	eor	r26, r26
    2250:	28 30       	cpi	r18, 0x08	; 8
    2252:	51 f1       	breq	.+84     	; 0x22a8 <__ultoa_invert+0x5c>
    2254:	20 31       	cpi	r18, 0x10	; 16
    2256:	81 f1       	breq	.+96     	; 0x22b8 <__ultoa_invert+0x6c>
    2258:	e8 94       	clt
    225a:	6f 93       	push	r22
    225c:	6e 7f       	andi	r22, 0xFE	; 254
    225e:	6e 5f       	subi	r22, 0xFE	; 254
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	8f 4f       	sbci	r24, 0xFF	; 255
    2264:	9f 4f       	sbci	r25, 0xFF	; 255
    2266:	af 4f       	sbci	r26, 0xFF	; 255
    2268:	b1 e0       	ldi	r27, 0x01	; 1
    226a:	3e d0       	rcall	.+124    	; 0x22e8 <__ultoa_invert+0x9c>
    226c:	b4 e0       	ldi	r27, 0x04	; 4
    226e:	3c d0       	rcall	.+120    	; 0x22e8 <__ultoa_invert+0x9c>
    2270:	67 0f       	add	r22, r23
    2272:	78 1f       	adc	r23, r24
    2274:	89 1f       	adc	r24, r25
    2276:	9a 1f       	adc	r25, r26
    2278:	a1 1d       	adc	r26, r1
    227a:	68 0f       	add	r22, r24
    227c:	79 1f       	adc	r23, r25
    227e:	8a 1f       	adc	r24, r26
    2280:	91 1d       	adc	r25, r1
    2282:	a1 1d       	adc	r26, r1
    2284:	6a 0f       	add	r22, r26
    2286:	71 1d       	adc	r23, r1
    2288:	81 1d       	adc	r24, r1
    228a:	91 1d       	adc	r25, r1
    228c:	a1 1d       	adc	r26, r1
    228e:	20 d0       	rcall	.+64     	; 0x22d0 <__ultoa_invert+0x84>
    2290:	09 f4       	brne	.+2      	; 0x2294 <__ultoa_invert+0x48>
    2292:	68 94       	set
    2294:	3f 91       	pop	r19
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	26 9f       	mul	r18, r22
    229a:	11 24       	eor	r1, r1
    229c:	30 19       	sub	r19, r0
    229e:	30 5d       	subi	r19, 0xD0	; 208
    22a0:	31 93       	st	Z+, r19
    22a2:	de f6       	brtc	.-74     	; 0x225a <__ultoa_invert+0xe>
    22a4:	cf 01       	movw	r24, r30
    22a6:	08 95       	ret
    22a8:	46 2f       	mov	r20, r22
    22aa:	47 70       	andi	r20, 0x07	; 7
    22ac:	40 5d       	subi	r20, 0xD0	; 208
    22ae:	41 93       	st	Z+, r20
    22b0:	b3 e0       	ldi	r27, 0x03	; 3
    22b2:	0f d0       	rcall	.+30     	; 0x22d2 <__ultoa_invert+0x86>
    22b4:	c9 f7       	brne	.-14     	; 0x22a8 <__ultoa_invert+0x5c>
    22b6:	f6 cf       	rjmp	.-20     	; 0x22a4 <__ultoa_invert+0x58>
    22b8:	46 2f       	mov	r20, r22
    22ba:	4f 70       	andi	r20, 0x0F	; 15
    22bc:	40 5d       	subi	r20, 0xD0	; 208
    22be:	4a 33       	cpi	r20, 0x3A	; 58
    22c0:	18 f0       	brcs	.+6      	; 0x22c8 <__ultoa_invert+0x7c>
    22c2:	49 5d       	subi	r20, 0xD9	; 217
    22c4:	31 fd       	sbrc	r19, 1
    22c6:	40 52       	subi	r20, 0x20	; 32
    22c8:	41 93       	st	Z+, r20
    22ca:	02 d0       	rcall	.+4      	; 0x22d0 <__ultoa_invert+0x84>
    22cc:	a9 f7       	brne	.-22     	; 0x22b8 <__ultoa_invert+0x6c>
    22ce:	ea cf       	rjmp	.-44     	; 0x22a4 <__ultoa_invert+0x58>
    22d0:	b4 e0       	ldi	r27, 0x04	; 4
    22d2:	a6 95       	lsr	r26
    22d4:	97 95       	ror	r25
    22d6:	87 95       	ror	r24
    22d8:	77 95       	ror	r23
    22da:	67 95       	ror	r22
    22dc:	ba 95       	dec	r27
    22de:	c9 f7       	brne	.-14     	; 0x22d2 <__ultoa_invert+0x86>
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	61 05       	cpc	r22, r1
    22e4:	71 05       	cpc	r23, r1
    22e6:	08 95       	ret
    22e8:	9b 01       	movw	r18, r22
    22ea:	ac 01       	movw	r20, r24
    22ec:	0a 2e       	mov	r0, r26
    22ee:	06 94       	lsr	r0
    22f0:	57 95       	ror	r21
    22f2:	47 95       	ror	r20
    22f4:	37 95       	ror	r19
    22f6:	27 95       	ror	r18
    22f8:	ba 95       	dec	r27
    22fa:	c9 f7       	brne	.-14     	; 0x22ee <__ultoa_invert+0xa2>
    22fc:	62 0f       	add	r22, r18
    22fe:	73 1f       	adc	r23, r19
    2300:	84 1f       	adc	r24, r20
    2302:	95 1f       	adc	r25, r21
    2304:	a0 1d       	adc	r26, r0
    2306:	08 95       	ret

00002308 <__prologue_saves__>:
    2308:	2f 92       	push	r2
    230a:	3f 92       	push	r3
    230c:	4f 92       	push	r4
    230e:	5f 92       	push	r5
    2310:	6f 92       	push	r6
    2312:	7f 92       	push	r7
    2314:	8f 92       	push	r8
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	ca 1b       	sub	r28, r26
    2332:	db 0b       	sbc	r29, r27
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	09 94       	ijmp

00002340 <__epilogue_restores__>:
    2340:	2a 88       	ldd	r2, Y+18	; 0x12
    2342:	39 88       	ldd	r3, Y+17	; 0x11
    2344:	48 88       	ldd	r4, Y+16	; 0x10
    2346:	5f 84       	ldd	r5, Y+15	; 0x0f
    2348:	6e 84       	ldd	r6, Y+14	; 0x0e
    234a:	7d 84       	ldd	r7, Y+13	; 0x0d
    234c:	8c 84       	ldd	r8, Y+12	; 0x0c
    234e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2350:	aa 84       	ldd	r10, Y+10	; 0x0a
    2352:	b9 84       	ldd	r11, Y+9	; 0x09
    2354:	c8 84       	ldd	r12, Y+8	; 0x08
    2356:	df 80       	ldd	r13, Y+7	; 0x07
    2358:	ee 80       	ldd	r14, Y+6	; 0x06
    235a:	fd 80       	ldd	r15, Y+5	; 0x05
    235c:	0c 81       	ldd	r16, Y+4	; 0x04
    235e:	1b 81       	ldd	r17, Y+3	; 0x03
    2360:	aa 81       	ldd	r26, Y+2	; 0x02
    2362:	b9 81       	ldd	r27, Y+1	; 0x01
    2364:	ce 0f       	add	r28, r30
    2366:	d1 1d       	adc	r29, r1
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	ed 01       	movw	r28, r26
    2374:	08 95       	ret

00002376 <_exit>:
    2376:	f8 94       	cli

00002378 <__stop_program>:
    2378:	ff cf       	rjmp	.-2      	; 0x2378 <__stop_program>
